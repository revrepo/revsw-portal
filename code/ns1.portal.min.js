$(document).ready(function() { $("#wrap").tooltip({ selector: "[data-toggle=tooltip]" }) });
angularLocalStorage.constant("prefix", "nsone-portal");
angular.module("portal", ["portal.filters", "portal.services", "portal.directives", "ngCookies", "LocalStorageModule", "ngSanitize", "angular-google-analytics"]).config(["$routeProvider", function($routeProvider) { "use strict";
  $routeProvider.when("/dashboard", { templateUrl: "partials/dashboard.html", controller: DashboardCtrl });
  $routeProvider.when("/zones", { templateUrl: "partials/zones.html", controller: ZoneListCtrl });
  $routeProvider.when("/zones/:zone", { templateUrl: "partials/zone.html", controller: ZoneCtrl });
  $routeProvider.when("/zones/:zone/:domain/:type", { templateUrl: "partials/record.html", controller: RecordCtrl });
  $routeProvider.when("/monitoring", { templateUrl: "partials/monitors.html", controller: MonitorListCtrl });
  $routeProvider.when("/monitoring/jobs/:jobid", { templateUrl: "partials/monitor.html", controller: MonitorCtrl });
  $routeProvider.when("/datasources", { templateUrl: "partials/datasources.html", controller: DataSourceCtrl });
  $routeProvider.when("/notifications", { templateUrl: "partials/notifications.html", controller: NotificationCtrl });
  $routeProvider.when("/pulsar", { templateUrl: "partials/pulsar.html", controller: PulsarCtrl });
  $routeProvider.when("/reports", { templateUrl: "partials/reports.html", controller: ReportCtrl });
  $routeProvider.when("/account/settings", { templateUrl: "partials/settings.html", controller: AccountSettingsCtrl });
  $routeProvider.when("/account/billing", { templateUrl: "partials/billing.html", controller: AccountBillingCtrl });
  $routeProvider.when("/invite/:code", { templateUrl: "partials/invite.html", controller: InviteCtrl });
  $routeProvider.when("/resetpassword", { templateUrl: "partials/resetrequest.html", controller: ResetRequestCtrl });
  $routeProvider.when("/resetpassword/:code", { templateUrl: "partials/resetpassword.html", controller: ResetPasswordCtrl });
  $routeProvider.when("/login", { templateUrl: "partials/login.html", controller: LoginCtrl });
  $routeProvider.otherwise({ redirectTo: "/dashboard" }) }]).controller("navctrl", ["$scope", "$location", function($scope, $location) { "use strict";
  $scope.navClass = function(page) {
    var currentRoute = $location.path().substring(1) || "dashboard";
    return page === currentRoute ? "active" : "" } }]).run(function($rootScope, $location, $cookieStore, localStorageService) { "use strict";
  $rootScope.$on("$routeChangeStart", function(event, next, current) {
    if (next.templateUrl == "partials/invite.html" || next.templateUrl == "partials/resetrequest.html" || next.templateUrl == "partials/resetpassword.html") {
      return }
    if (!$cookieStore.get("username") || !$cookieStore.get("apikey") || $cookieStore.get("perms") === null) { $cookieStore.put("username", localStorageService.get("username"));
      $cookieStore.put("apikey", localStorageService.get("apikey"));
      $cookieStore.put("perms", localStorageService.get("perms"));
      if (!$rootScope.username || !$rootScope.apikey) {
        if (next.templateUrl != "partials/login.html") { $location.path("/login") } } } else if ($cookieStore.get("ns1_portal_v2_lock")) { location.href = location.href.replace("/#", "/v2/#") } }) });
angular.module("angular-google-analytics", []).run(["gglAnalytics", function(gglAnalytics) {! function(i, s, o, g, r, a, m) { i.GoogleAnalyticsObject = r;
    i[r] = i[r] || function() {
      (i[r].q = i[r].q || []).push(arguments) }, i[r].l = 1 * new Date;
    a = s.createElement(o), m = s.getElementsByTagName(o)[0];
    a.async = 1;
    a.src = g;
    m.parentNode.insertBefore(a, m) }(window, document, "script", "//www.google-analytics.com/analytics.js", "ga");
  ga("create", "UA-41778111-2", "auto") }]).service("gglAnalytics", ["$rootScope", "$window", "$location", function($rootScope, $window, $location) {
  function track() {
    var path = $location.path();
    $window.ga("set", "page", path);
    $window.ga("send", "pageview") }
  $rootScope.$on("$viewContentLoaded", track);
  return null }]);

function hasperm(perms, group, perm) {
  if (perms[group]) {
    return perms[group][perm] !== false } else {
    return true } }

function hasfeature(features, feature) {
  if (features[feature]) {
    return features[feature] !== false } else {
    return false } }

function safeprefs(prefs) {
  if (prefs && prefs["2factor"]) {
    var pcopy = angular.copy(prefs);
    delete pcopy["2factor"].secret;
    delete pcopy["2factor"].uri;
    return pcopy }
  return prefs }

function find_landing_page(perms) {
  if (hasperm(perms, "dns", "view_zones") || hasperm(perms, "dns", "manage_zones") || hasperm(perms, "account", "view_invoices")) {
    return "/dashboard?tutorial" } else if (hasperm(perms, "monitoring", "view_jobs") || hasperm(perms, "monitoring", "manage_jobs")) {
    return "/monitoring" } else if (hasperm(perms, "data", "manage_datasources")) {
    return "/datasources" } else if (hasperm(perms, "account", "view_activity_log")) {
    return "/reports" } else if (hasperm(perms, "account", "manage_account_settings") || hasperm(perms, "account", "manage_users") || hasperm(perms, "account", "manage_apikeys")) {
    return "/account/settings" } else if (hasperm(perms, "account", "manage_payment_methods") || hasperm(perms, "account", "view_invoices") || hasperm(perms, "account", "manage_plan")) {
    return "/account/billing" } else {
    return "/dashboard?tutorial" } }

function LoginCtrl($scope, $location, $cookieStore, localStorageService, Login) { "use strict";
  var bicon = "icon-signin";
  $scope.errors = null;
  $scope.bicon = bicon;
  $scope.show_2factor = false;
  $("input").on("change", function() { $(this).trigger("input") });
  $("#username").focus();
  $scope.login = function() {
    if (!$scope.username || !$scope.password) { $scope.errors = ["Enter both a username and a password!"];
      return }
    if ($scope.show_2factor && !$scope.token) { $scope.errors = ["Enter a valid 2-factor token!"];
      return }
    $scope.bicon = "icon-spin icon-spinner";
    var req = { username: $scope.username, password: $scope.password };
    if ($scope.token) { req.token = $scope.token }
    var creds = Login.check(req, function() { $scope.bicon = bicon;
      $scope.username = creds.user;
      $scope.customer = creds.customer;
      $cookieStore.put("username", creds.user);
      $cookieStore.put("apikey", creds.key);
      if (!creds.permissions) { creds.permissions = {} }
      $cookieStore.put("perms", creds.permissions);
      if (!creds.preferences) { creds.preferences = {} }
      $cookieStore.put("prefs", safeprefs(creds.preferences));
      if (!creds.features) { creds.features = {} }
      $cookieStore.put("features", creds.features);
      if ($scope.rememberme) { localStorageService.add("username", creds.user);
        localStorageService.add("apikey", creds.key);
        localStorageService.add("perms", creds.permissions);
        localStorageService.add("prefs", safeprefs(creds.preferences));
        localStorageService.add("features", creds.features) }
      var page = find_landing_page(creds.permissions);
      $location.url(page) }, function(err) { $scope.bicon = bicon;
      if (err.status == 402) { $scope.show_2factor = true;
        setTimeout(function() { $("#token").focus() }, 50);
        $scope.errors = null;
        return }
      if (err.data.message) { $scope.errors = [err.data.message] } else { $scope.errors = ["Invalid username or password"] } }) } }

function InviteCtrl($scope, $location, $routeParams, $cookieStore, $injector, localStorageService, Invite) { "use strict";
  $scope.spin = { login: false };
  $scope.errors = [];
  $scope.code = decodeURIComponent($routeParams.code);
  $scope.logged_in = function() { $scope.username = $scope.key.user;
    $scope.customer = $scope.key.customer;
    $cookieStore.put("username", $scope.key.user);
    $cookieStore.put("apikey", $scope.key.key);
    if (!$scope.key.permissions) { $scope.key.permissions = {} }
    $cookieStore.put("perms", $scope.key.permissions);
    if (!$scope.key.preferences) { $scope.key.preferences = {} }
    $cookieStore.put("prefs", safeprefs($scope.key.preferences));
    if (!$scope.key.features) { $scope.key.features = {} }
    $cookieStore.put("features", $scope.key.features) };
  $scope.password = null;
  $scope.confirm = null;
  $scope.key = Invite.get({ code: $routeParams.code }, $scope.logged_in, function(err) { $scope.errors.push(err.data.message) });
  $scope.unequal = function(pass, confirm) {
    return pass != confirm };
  $scope.set_login = function() {
    var InviteSave = $injector.get("InviteSave");
    $scope.spin.login = true;
    InviteSave.save({ code: $routeParams.code }, { password: $scope.password, username: $scope.key.user, name: $scope.key.name }, function() { $scope.logged_in();
      var page = find_landing_page($scope.key.permissions);
      $location.url(page) }, function(err) { $scope.spin.login = false;
      $scope.errors = [err.data.message] }) } }

function ResetRequestCtrl($scope, ResetRequest) { "use strict";
  $scope.spin = { login: false };
  $scope.errors = [];
  $scope.maderequest = false;
  $scope.username = null;
  $scope.request = function(username) { $scope.spin.login = true;
    ResetRequest.create({ username: username }, {}, function() { $scope.spin.login = false;
      $scope.maderequest = true;
      $scope.errors = [] }, function(err) { $scope.spin.login = false;
      $scope.errors = [err.data.message] }) } }

function ResetPasswordCtrl($scope, $location, $routeParams, $cookieStore, $injector, localStorageService, ResetPassword) { "use strict";
  $scope.spin = { login: false };
  $scope.errors = [];
  $scope.code = decodeURIComponent($routeParams.code);
  $scope.logged_in = function() { $scope.username = $scope.key.user;
    $scope.customer = $scope.key.customer;
    $cookieStore.put("username", $scope.key.user);
    $cookieStore.put("apikey", $scope.key.key);
    if (!$scope.key.permissions) { $scope.key.permissions = {} }
    $cookieStore.put("perms", $scope.key.permissions);
    if (!$scope.key.preferences) { $scope.key.preferences = {} }
    $cookieStore.put("prefs", safeprefs($scope.key.preferences));
    if (!$scope.key.features) { $scope.key.features = {} }
    $cookieStore.put("features", $scope.key.features) };
  $scope.password = null;
  $scope.confirm = null;
  $scope.key = ResetPassword.get({ code: $routeParams.code }, $scope.logged_in, function(err) { $scope.errors.push(err.data.message) });
  $scope.unequal = function(pass, confirm) {
    return pass != confirm };
  $scope.set_password = function() {
    var Password = $injector.get("Password");
    $scope.spin.login = true;
    Password.save({ password: $scope.password }, function() { $scope.logged_in();
      var page = find_landing_page($scope.key.permissions);
      $location.url(page) }, function(err) { $scope.spin.login = false;
      $scope.error = [err.data.message] }) } }

function PortalCtrl($scope, $location, $routeParams, $cookieStore, localStorageService, $anchorScroll, Password, Preferences) { "use strict";
  $scope.feed_ptrs_enabled = false;
  $scope.alerts = [];
  $scope.logout = function() { $cookieStore.put("username", null);
    $cookieStore.put("apikey", null);
    $cookieStore.put("perms", null);
    $cookieStore.put("prefs", null);
    $cookieStore.put("features", null);
    localStorageService.remove("username");
    localStorageService.remove("apikey");
    localStorageService.remove("perms");
    localStorageService.remove("prefs");
    localStorageService.remove("features");
    window.location.reload() };
  $scope.scrollTo = function(id) { $location.hash(id);
    $anchorScroll() };
  $scope.username = $cookieStore.get("username");
  $scope.perms = $cookieStore.get("perms");
  if (!$scope.perms) { $scope.perms = {} }
  $scope.prefs = $cookieStore.get("prefs");
  if (!$scope.prefs) { $scope.prefs = {} }
  $scope.features = $cookieStore.get("features");
  if (!$scope.features) { $scope.features = {} }
  $scope.hasperm = function(group, perm) {
    return hasperm($scope.perms, group, perm) };
  $scope.noperm = function(group, perm) {
    return !hasperm($scope.perms, group, perm) };
  $scope.hasfeature = function(feature) {
    return hasfeature($scope.features, feature) };
  $scope.empty_object = function(o) {
    for (var i in o) {
      if (o.hasOwnProperty(i)) {
        return false } }
    return true };
  $scope.showtutorial = $scope.prefs.show_tutorial;
  if ($scope.showtutorial == null) { $scope.showtutorial = true }
  $scope.show_tutorial = function() { $("#tutorial").modal("show") };
  $scope.cancel_tutorial = function() { $("#tutorial").modal("hide") };
  $scope.show_tutorial_onload = function() {
    if ($routeParams.tutorial) {
      if ($scope.showtutorial) { $scope.show_tutorial() } } };
  $scope.active_tab = "password";
  var saveicon = "icon-save";
  $scope.saveicon = saveicon;
  $scope.unequal = function(newpass1, newpass2) {
    return newpass1 != newpass2 };
  $scope.show_preferences = function() { $scope.saveicon = saveicon;
    $scope.password_error = null;
    $scope.prefs_error = null;
    $scope.oldpass = $scope.newpass1 = $scope.newpass2 = null;
    $scope.loading_prefs = true;
    Preferences.get({}, function(prefs) { $scope.loading_prefs = false;
      $scope.prefs = prefs;
      if ($scope.prefs["2factor"] !== undefined && $scope.prefs["2factor"].type == "totp") { qropts.text = $scope.prefs["2factor"].uri;
        $("#qrcode").text("").qrcode(qropts) } }, function(err) { $scope.loading_prefs = false });
    $("#preferences").modal("show") };
  $scope.swap_to_v2 = function($event) {
    var href = location.href.replace("/#", "/v2/#");
    var e = $event;
    if (e.shiftKey || e.ctrlKey || e.metaKey) { window.open(href, "_blank") } else { location.href = href } };
  $scope.cancel_preferences = function() { $("#preferences").modal("hide") };
  $scope.changepass = function(oldpass, newpass) { $scope.saveicon = "icon-spin icon-spinner";
    Password.save({ password: newpass }, $scope.cancel_preferences, function(err) { $scope.saveicon = saveicon;
      $scope.password_error = "Cannot change password: " + err.data.message }) };
  $scope.make_rand_pass = function(length, special) {
    var iteration = 0;
    var password = "";
    var randomNumber;
    if (special === undefined) { special = false }
    while (iteration < length) { randomNumber = Math.floor(Math.random() * 100) % 94 + 33;
      if (!special) {
        if (randomNumber >= 33 && randomNumber <= 47) {
          continue }
        if (randomNumber >= 58 && randomNumber <= 64) {
          continue }
        if (randomNumber >= 91 && randomNumber <= 96) {
          continue }
        if (randomNumber >= 123 && randomNumber <= 126) {
          continue } }
      iteration++;
      password += String.fromCharCode(randomNumber) }
    $scope.randpass = password };
  $scope.make_rand_pass(12);
  $scope.copypass = function() { $scope.newpass1 = $scope.randpass;
    $scope.newpass2 = $scope.randpass };
  $scope.show_2factor_qr = true;
  var qropts = { render: "div", width: 200, height: 200, text: $scope.prefs["2factor"] !== undefined ? $scope.prefs["2factor"].uri : "" };
  if ($scope.prefs["2factor"] !== undefined && $scope.prefs["2factor"].type == "totp") { $("#qrcode").text("").qrcode(qropts) }
  $scope.enable_2factor = function() {
    var prefs = $cookieStore.get("prefs");
    if (prefs === undefined) { prefs = {} }
    if (prefs["2factor"] === undefined) { prefs["2factor"] = {} }
    prefs["2factor"].type = "totp";
    $scope.saveprefs(prefs) };
  $scope.disable_2factor = function() {
    var prefs = $cookieStore.get("prefs");
    if (prefs === undefined) { prefs = {} }
    if (prefs["2factor"] === undefined) { prefs["2factor"] = {} }
    prefs["2factor"].type = null;
    $scope.saveprefs(prefs) };
  $scope.toggle_show_tutorial = function(show) {
    var prefs = $cookieStore.get("prefs");
    if (prefs === undefined) { prefs = {} }
    if (prefs["2factor"] !== undefined) { prefs["2factor"] = {} }
    prefs.show_tutorial = show;
    $scope.saveprefs(prefs) };
  $scope.saveprefs = function(prefs) { $scope.saveicon = "icon-spin icon-spinner";
    $scope.saving = true;
    Preferences.save({}, prefs, function(newprefs) { $cookieStore.put("prefs", safeprefs(newprefs));
      localStorageService.add("prefs", safeprefs(newprefs));
      $scope.prefs = newprefs;
      if ($scope.prefs["2factor"] !== undefined && $scope.prefs["2factor"].type == "totp") { qropts.text = $scope.prefs["2factor"].uri;
        $("#qrcode").text("").qrcode(qropts) }
      $scope.prefs_error = null;
      $scope.saveicon = saveicon;
      $scope.saving = false }, function(err) { $scope.prefs_error = [err.data.message];
      $scope.saveicon = saveicon;
      $scope.saving = false }) } }

function Poller($scope, $timeout, $setup) { "use strict";
  if (!("repeat" in $scope)) { $scope.repeat = {} }
  if (!("newval" in $scope)) { $scope.newval = {} }
  $setup.get_freq = function(F, iter) {
    var keys = Object.keys(F);
    for (var i = 0; i < keys.length; i++) {
      if (keys[i] !== "undefined" && keys[i] > iter) {
        return F[keys[i]] } }
    return 36e5 };
  $setup.input = typeof $setup.input === "undefined" ? {} : $setup.input;
  $setup.frequency = typeof $setup.frequency === "undefined" ? 6e4 : $setup.frequency;
  $setup.update = typeof $setup.update === "undefined" ? function() {} : $setup.update;
  $setup.first_success = typeof $setup.first_success === "undefined" ? function() {} : $setup.first_success;
  $setup.first_error = typeof $setup.first_error === "undefined" ? function() {} : $setup.first_error;
  $setup.success = typeof $setup.success === "undefined" ? function() {} : $setup.success;
  $setup.error = typeof $setup.error === "undefined" ? function() {} : $setup.error;
  $setup.pause_while = typeof $setup.pause_while === "undefined" ? function() {
    return false } : $setup.pause_while;
  $setup.iterations = 0;
  $scope[$setup.scopevar] = $setup.func($setup.input, function(rsp) { $setup.first_success(rsp);
    $setup.success(rsp);
    $scope.repeat[$setup.scopevar] = function() { $setup.iterations++;
      var frequency = typeof $setup.frequency === "object" ? $setup.get_freq($setup.frequency, $setup.iterations) : $setup.frequency;
      var timeout = $timeout(function() { $setup.update($setup);
        if ($setup.pause_while()) { $scope.repeat[$setup.scopevar]();
          return }
        $scope.newval[$setup.scopevar] = $setup.func($setup.input, function(rsp) { $scope[$setup.scopevar] = $scope.newval[$setup.scopevar];
          $setup.success(rsp);
          $scope.repeat[$setup.scopevar]() }, function(err) { $setup.error(err) }) }, frequency);
      $scope.$on("$destroy", function() { $timeout.cancel(timeout) }) };
    $scope.repeat[$setup.scopevar]() }, function(err) { $setup.first_error(err);
    $setup.error(err) }) }

function DashboardCtrl($scope, $injector, $location, QPS, DashboardUsage, BillAtAGlance) { "use strict";
  $injector.invoke(PortalCtrl, this, { $scope: $scope });
  $scope.spin = { qps: true, usage: true, bag: true };
  $scope.usage_failure = false;
  $scope.bag_failure = false;
  $scope.go_to_zonecreate = function() { $location.url("/zones?create") };
  if ($scope.hasperm("dns", "manage_zones") || $scope.hasperm("dns", "view_zones")) { $injector.invoke(Poller, this, { $scope: $scope, $setup: { func: QPS.get, scopevar: "qps", frequency: { 60: 5e3, 120: 3e4, 132: 3e5, 180: 9e5 }, first_success: function() { $scope.spin.qps = false }, first_error: function() { $scope.spin.qps = false }, error: function() { $scope.qps = { qps: 0 } } } });
    $injector.invoke(Poller, this, { $scope: $scope, $setup: { func: DashboardUsage.query, scopevar: "usage", frequency: { 12: 3e5, 36: 9e5 }, first_success: function() { $scope.spin.usage = false;
          $scope.usage_failure = false }, first_error: function() { $scope.spin.usage = false;
          $scope.usage_failure = false } } }) }
  if ($scope.hasperm("account", "view_invoices")) { $injector.invoke(Poller, this, { $scope: $scope, $setup: { func: BillAtAGlance.get, scopevar: "bag", frequency: { 12: 3e5, 36: 9e5 }, first_success: function() { $scope.spin.bag = false;
          $scope.bag_failure = false }, first_error: function() { $scope.spin.bag = false;
          $scope.bag_failure = true } } });
    $scope.query_usage_gt = function(perc) {
      if (!$scope.bag || !$scope.bag.$resolved) {
        return false }
      var maxcredit = $scope.bag.static.query_credit + $scope.bag.dynamic.query_credit + $scope.bag.intelligent.query_credit + $scope.bag.any.query_credit;
      return 100 * $scope.bag.totals.queries / maxcredit >= perc };
    $scope.record_usage_gt = function(perc) {
      if (!$scope.bag || !$scope.bag.$resolved) {
        return false }
      var maxcredit = $scope.bag.static.record_credit + $scope.bag.dynamic.record_credit + $scope.bag.intelligent.record_credit + $scope.bag.any.record_credit;
      return 100 * $scope.bag.totals.records / maxcredit >= perc };
    $scope.upgrade_plan = function() { $location.path("/account/billing") } }
  $scope.examplegraph = [
    [0, 18],
    [1, 18],
    [2, 16],
    [3, 16],
    [4, 16],
    [5, 16],
    [6, 16],
    [7, 17],
    [8, 18],
    [9, 18],
    [10, 17],
    [11, 18],
    [12, 17],
    [13, 19],
    [14, 18],
    [15, 21],
    [16, 20],
    [17, 20],
    [18, 19],
    [19, 21],
    [20, 22],
    [21, 23],
    [22, 21],
    [23, 20],
    [24, 20],
    [25, 21],
    [26, 21],
    [27, 19],
    [28, 21],
    [29, 21],
    [30, 21],
    [31, 22],
    [32, 22],
    [33, 22],
    [34, 22],
    [35, 24],
    [36, 25],
    [37, 26],
    [38, 26],
    [39, 26]
  ] }

function ZoneListCtrl($scope, $timeout, $injector, $location, $routeParams, QPS, Zone, ZoneListUsage, Zonefile, NetworkList) { "use strict";
  $injector.invoke(PortalCtrl, this, { $scope: $scope });
  $scope.spin = { qps: true, zones: true, usage: true, "import": false, networks: true };
  $scope.zones_failure = false;
  $scope.usage_failure = false;
  $scope.filterOutLinkedZones = function(val) {
    return !val.link || val.link === "" };
  $scope.merge_usage = function() {
    if (!$scope.usage && $scope.spin.usage || !$scope.zones) {
      return }
    for (var i = 0; i < $scope.zones.length; i++) {
      var z = $scope.zones[i];
      for (var j = 0; j < $scope.usage.length; j++) {
        if (z.zone == $scope.usage[j].zone) { z.usage = $scope.usage[j];
          break } }
      if (!z.usage) { z.usage = { graph: [], queries: 0, queries_by_tier: [0, 0, 0], records: 0 } } } };
  $injector.invoke(Poller, this, { $scope: $scope, $setup: { func: QPS.get, scopevar: "qps", frequency: { 60: 5e3, 120: 3e4, 132: 3e5, 180: 9e5 }, first_success: function() { $scope.spin.qps = false }, first_error: function() { $scope.spin.qps = false }, error: function() { $scope.qps = { qps: 0 } } } });
  $scope.networks = NetworkList.query({}, function() { $scope.spin.networks = false;
    $scope.networks_by_id = {};
    for (var i = 0; i < $scope.networks.length; i++) { $scope.networks_by_id[$scope.networks[i].network_id] = $scope.networks[i] }
    $scope.merge_usage() }, function() { $scope.spin.networks = false });
  $injector.invoke(Poller, this, { $scope: $scope, $setup: { func: Zone.query, scopevar: "zones", frequency: { 12: 3e5, 36: 9e5 }, first_success: function() { $scope.spin.zones = false;
        $scope.zones_failure = false }, first_error: function() { $scope.spin.zones = false;
        $scope.zones_failure = false }, success: $scope.merge_usage } });
  $injector.invoke(Poller, this, { $scope: $scope, $setup: { func: ZoneListUsage.query, scopevar: "usage", frequency: { 12: 3e5, 36: 9e5 }, first_success: function() { $scope.spin.usage = false;
        $scope.usage_failure = false }, first_error: function() { $scope.spin.usage = false;
        $scope.usage_failure = false }, success: $scope.merge_usage } });
  $scope.clickzone = function(zone) {
    if (zone.link && zone.link !== "") { $scope.linkedzone = zone.link;
      $("#viewlinkedzone").modal("show");
      return }
    $scope.linkedzone = null;
    $location.path("/zones/" + encodeURIComponent(zone.zone)) };
  $scope.ok_viewlinkedzone = function(zone) { $("#viewlinkedzone").modal("hide");
    $scope.linkedzone = null };
  $scope.goto_linktarget = function(target) { $scope.ok_viewlinkedzone();
    $location.path("/zones/" + encodeURIComponent(target)) };
  $scope.confirm_deletezone = function(zone, idx) { $scope.delzone = zone;
    $scope.delzone_idx = idx;
    $scope.del_error = null;
    $("#confirmdelete").modal("show") };
  $scope.cancel_deletezone = function() { $("#confirmdelete").modal("hide");
    $scope.delzone = null;
    $scope.delzone_idx = null;
    $scope.del_error = null };
  $scope.deletezone = function(zone, idx) { Zone.remove({ zone: encodeURIComponent(zone.zone) }, function() { $scope.cancel_deletezone();
      $scope.zones.splice(idx, 1) }, function(err) { $scope.del_error = err.data.message }) };
  $scope.importtype = null;
  $scope.zonefile = null;
  $scope.percentage = 0;
  $scope.show_zonefileselect = function() { document.getElementById("zonefileselector").click() };
  $scope.zonefile_selected = function($files) { $scope.zonefile = $files[0] };
  $scope.show_createzone = function() { $scope.zonefile = null;
    $scope.newnetworks = {};
    if ($scope.networks !== undefined) {
      for (var n = 0; n < $scope.networks.length; n++) { $scope.newnetworks[$scope.networks[n].network_id] = true } }
    $scope.create_error = null;
    $scope.import_complete = null;
    $scope.import_status = null;
    $scope.import_warnings = null;
    $("#createzone").modal("show") };
  $scope.cancel_createzone = function() { $("#createzone").modal("hide");
    $scope.zone.zone = null;
    $scope.create_error = null;
    $scope.newnetworks = null;
    $scope.zonefile = null };
  $scope.createzone = function(zone) {
    if ($scope.importtype == "zonefile") { $scope.percentage = 0;
      $scope.import_status = "Uploading " + $scope.zonefile.name;
      Zonefile.create({ zone: encodeURIComponent(zone.zone) }, $scope.zonefile, function(callout) { $scope.percentage = callout.percent;
        $scope.import_status = callout.status;
        $scope.zonefile_callout = callout;
        $scope.spin.import = true;
        var repeat = function() {
          var timeout = $timeout(function() { $scope.zonefile_callout = Zonefile.get({ jobid: $scope.zonefile_callout.id }, function(rsp) { $scope.percentage = rsp.percent;
              $scope.import_status = rsp.status;
              if ("response_code" in rsp) { $scope.spin.import = false;
                $timeout.cancel(timeout);
                if (rsp.response_code == 200) { $scope.import_complete = true;
                  $scope.import_warnings = rsp.result.warnings;
                  $scope.zones = Zone.query({}, $scope.merge_usage) } else { $scope.import_complete = null;
                  $scope.import_status = null;
                  $scope.create_error = rsp.result.message } } else { repeat() } }, function(err) { $scope.spin.import = false;
              $scope.create_error = err.data.message;
              $timeout.cancel(timeout) }) }, 1e3);
          $scope.$on("$destroy", function() { $timeout.cancel(timeout) }) };
        repeat() }, function(err) { $scope.spin.import = false;
        $scope.create_error = err.data.message }) } else {
      if ($scope.importtype == "manual") { delete zone.secondary } else if ($scope.importtype == "secondary") { zone.secondary.enabled = true } else if ($scope.importtype == "linked") {
        var linked_zone = { zone: zone.zone, link: zone.link };
        zone = linked_zone }
      if ($scope.importtype != "linked") { zone.networks = [];
        for (var n = 0; n < $scope.networks.length; n++) {
          if ($scope.newnetworks[$scope.networks[n].network_id]) { zone.networks.push($scope.networks[n].network_id) } } }
      Zone.create({ zone: encodeURIComponent(zone.zone) }, zone, function(z) { $scope.gotozone(z) }, function(err) { $scope.create_error = err.data.message }) } };
  $scope.createzone_submitok = function() {
    if ($scope.createzoneform.$invalid || !$scope.zone.zone || !$scope.importtype) {
      return false }
    if ($scope.importtype == "zonefile" && !$scope.zonefile) {
      return false }
    return true };
  $scope.gotozone = function(zone) {
    if (zone.link && zone.link !== "") { $scope.zones = Zone.query({}, function() { $scope.cancel_createzone();
        $scope.merge_usage() }) } else {
      var z = angular.copy(zone.zone);
      $scope.cancel_createzone();
      $location.path("/zones/" + encodeURIComponent(z)) } };
  if ($routeParams.create) { $scope.show_createzone() } }

function ZoneCtrl($scope, $injector, $location, $routeParams, QPS, Zone, Record, RecordAnalyze, AnswerParser, ZoneUsage, NetworkList) {
  "use strict";
  var bicon = "icon-save";
  $injector.invoke(PortalCtrl, this, { $scope: $scope });
  $scope.bicon = bicon;
  $scope.zone_name = decodeURIComponent($routeParams.zone);
  $scope.spin = { qps: true, zone: true, usage: true };
  $scope.zone_failure = false;
  $scope.usage_failure = false;
  $scope.zone = null;
  $scope.qps = null;
  $scope.secedit = null;
  $scope.curpage = 0;
  $scope.pagesize = 50;
  $scope.pageprev = function(full) {
    if ($scope.curpage <= 0) {
      return }
    if (full) { $scope.curpage = 0 } else { $scope.curpage = $scope.curpage - 1 } };
  $scope.pagenext = function(len, full) {
    var max = Math.ceil(len / $scope.pagesize) - 1;
    if ($scope.curpage >= max) {
      return }
    if (full) { $scope.curpage = max } else { $scope.curpage = $scope.curpage + 1 } };
  $scope.merge_usage = function() {
    if (!$scope.usage && $scope.spin.usage || !$scope.zone || !$scope.zone.records) {
      return }
    for (var i = 0; i < $scope.zone.records.length; i++) {
      var r = $scope.zone.records[i];
      for (var j = 0; j < $scope.usage.length; j++) {
        var u = $scope.usage[j];
        if (r.domain == u.domain && r.type == u.rectype) { r.usage = u;
          break } }
      if (!r.usage) { r.usage = { graph: [], queries: 0 } } }
    if ($scope.secedit == null && $scope.zone.primary !== undefined && $scope.zone.primary.secondaries !== undefined && $scope.zone.primary.secondaries.length) { $scope.secedit = [];
      for (i = 0; i < $scope.zone.primary.secondaries.length; i++) { $scope.secedit[i] = false } } };
  $injector.invoke(Poller, this, { $scope: $scope, $setup: { func: QPS.get, scopevar: "qps", input: { zone: $routeParams.zone }, frequency: { 60: 5e3, 120: 3e4, 132: 3e5, 180: 9e5 }, first_success: function() { $scope.spin.qps = false }, first_error: function() { $scope.spin.qps = false }, error: function() { $scope.qps = { qps: 0 } } } });
  $scope.networks = NetworkList.query({}, function() { $scope.networks_by_id = {};
    for (var i = 0; i < $scope.networks.length; i++) { $scope.networks_by_id[$scope.networks[i].network_id] = $scope.networks[i] }
    $scope.merge_usage() });
  $injector.invoke(Poller, this, { $scope: $scope, $setup: { func: Zone.get, scopevar: "zone", input: { zone: $routeParams.zone }, frequency: { 12: 3e5, 36: 9e5 }, first_success: function() { $scope.origzone = angular.copy($scope.zone);
        $scope.spin.zone = false;
        $scope.zone_failure = false }, first_error: function() { $scope.spin.zone = false;
        $scope.zone_failure = false }, success: $scope.merge_usage } });
  $injector.invoke(Poller, this, { $scope: $scope, $setup: { func: ZoneUsage.query, scopevar: "usage", input: { zone: $routeParams.zone }, frequency: { 12: 3e5, 36: 9e5 }, first_success: function() { $scope.spin.usage = false;
        $scope.usage_failure = false }, first_error: function() { $scope.spin.usage = false;
        $scope.usage_failure = false }, success: $scope.merge_usage } });
  $scope.clickrecord = function(record) {
    if ($scope.hasperm("data", "manage_datasources")) { $location.path("/zones/" + encodeURIComponent($scope.zone.zone) + "/" + encodeURIComponent(record.domain) + "/" + record.type) } else { $scope.alerts = angular.copy(["You need both zone view/manage and datasource manage rights to view this record."]) } };
  $scope.reverse_permitted = function(record_type) {
    return (record_type === "A" || record_type === "AAAA") && $scope.hasfeature("reverse_record") };
  $scope.hover = function(idx, hover) { $scope.zone.records[idx].over = hover;
    $scope.origzone.records[idx].over = hover };
  $scope.unchanged = function(z) {
    if (z === null || $scope.origzone === null) {
      return true }
    if ($scope.changed_networks) {
      return false }
    if (z.primary !== undefined && z.primary.enabled !== undefined) {
      if (z.primary.secondaries.length != $scope.origzone.primary.secondaries.length) {
        return false }
      for (var i = 0; i < z.primary.secondaries.length; i++) {
        if (z.primary.secondaries[i].ip != $scope.origzone.primary.secondaries[i].ip || z.primary.secondaries[i].port != $scope.origzone.primary.secondaries[i].port || z.primary.secondaries[i].notify != $scope.origzone.primary.secondaries[i].notify) {
          return false } } }
    return angular.equals(z, $scope.origzone) };
  $scope.set_new_network = function(netid) { $scope.newnetworks[netid] = !$scope.newnetworks[netid];
    $scope.overriden_zone_networks[netid] = $scope.newnetworks[netid];
    $scope.changed_networks = true };
  $scope.toggle_secondary_network = function(zone, secondary, netid) {
    if (zone.networks != null && $scope.newnetworks[netid]) { secondary._valid_networks[netid] = !secondary._valid_networks[netid] } };
  $scope.addsecondary = function() {
    if ($scope.zone.primary.secondaries === undefined) { $scope.zone.primary.secondaries = [] }
    var secondary = { ip: null, port: 53, notify: false };
    if ($scope.zone.networks != null) { secondary._valid_networks = {};
      $scope.zone.networks.forEach(function(netid) { secondary._valid_networks[netid] = true });
      secondary.networks = $scope.zone.networks }
    $scope.zone.primary.secondaries.push(secondary);
    if ($scope.secedit == null) { $scope.secedit = [] }
    $scope.secedit.push(true) };
  $scope.savezone = function(zone) { $scope.bicon = "icon-spin icon-spinner";
    if ($scope.changed_networks) { zone.networks = [];
      var netids = Object.keys($scope.newnetworks);
      for (var k = 0; k < netids.length; k++) {
        if ($scope.newnetworks[netids[k]]) { zone.networks.push(parseInt(netids[k], 10)) } } }
    if ("primary" in zone && "secondaries" in zone.primary && zone.networks != null) { zone.primary.secondaries.forEach(function(secondary) {
        var enabled_secondary_networks = [];
        if (!secondary._valid_networks) { secondary._valid_networks = function() {
            var hash = {};
            $scope.zone.networks.forEach(function(netid) { hash[netid] = true });
            return hash }() }
        Object.keys(secondary._valid_networks).forEach(function(netid) {
          if (secondary._valid_networks[netid]) { enabled_secondary_networks.push(parseInt(netid, 10)) } });
        delete secondary._valid_networks;
        secondary.networks = enabled_secondary_networks;
        Object.keys($scope.overriden_zone_networks).forEach(function(netid) { netid = parseInt(netid, 10);
          var status = $scope.overriden_zone_networks[netid];
          var result = secondary.networks.indexOf(netid);
          if (status) {
            if (result === -1) { secondary.networks.push(netid) } } else {
            if (result !== -1) { secondary.networks.splice(result, 1) } } }) }) }
    Zone.save({ zone: encodeURIComponent(zone.zone) }, zone, function(z) { $scope.bicon = bicon;
      $scope.alerts = ["Saved changes to <b>" + zone.zone + "</b>"];
      if ($scope.changed_networks) { $scope.zone = Zone.get({ zone: $routeParams.zone }, function() { $scope.origzone = angular.copy($scope.zone);
          $scope.merge_usage();
          $scope.cancel_zonesettings() }) } else { $scope.origzone = angular.copy(zone);
        $scope.cancel_zonesettings() } }, function(err) { $scope.bicon = bicon;
      $scope.zonesettings_error = ["Unable to save changes to <b>" + zone.zone + "</b>: " + err.data.message] }) };
  $scope.show_zonesettings = function() { $scope.zonesettings_error = null;
    $scope.changed_networks = false;
    $scope.overriden_zone_networks = {};
    if ($scope.zone.networks) { $scope.newnetworks = {};
      for (var i = 0; i < $scope.zone.networks.length; i++) { $scope.newnetworks[$scope.zone.networks[i]] = true }
      var primary = $scope.zone.primary || {};
      var secondaries = primary.secondaries || [];
      secondaries.forEach(function(secondary) {
        if (secondary._valid_networks && Object.keys(secondary._valid_networks).length > 0) {
          return }
        secondary._valid_networks = {};
        if (Array.isArray(secondary.networks)) { $scope.zone.networks.forEach(function(netid) {
            if (secondary.networks.indexOf(netid) !== -1) { secondary._valid_networks[netid] = true } else { secondary._valid_networks[netid] = false } }) } else { secondary.networks = $scope.zone.networks;
          secondary.networks.forEach(function(netid) { secondary._valid_networks[netid] = true }) } }) } else {
      if ($scope.networks && $scope.networks[0] === undefined) { $scope.newnetworks = {} } else { $scope.newnetworks = { 0: true } } }
    $("#zonesettings").modal("show") };
  $scope.cancel_zonesettings = function() { $("#zonesettings").modal("hide");
    delete $scope.newnetworks;
    $scope.zonesettings_error = null;
    $scope.changed_networks = false };
  $scope.confirm_deleterec = function(rec, idx) { $scope.delrec_idx = idx + $scope.curpage * $scope.pagesize;
    $scope.delrec = rec;
    $scope.del_error = null;
    $scope.revrec = null;
    $scope.delete_revrec = false;
    if ($scope.reverse_permitted(rec.type)) { RecordAnalyze.get({ zone: $routeParams.zone, domain: encodeURIComponent(rec.domain), type: rec.type }, function(r) { $scope.revrec = null;
        if (r && r.exists) { $scope.revrec = r.record } }, function(err) { $scope.revrec = null }) }
    $("#confirmdelete").modal("show") };
  $scope.cancel_deleterec = function() {
    $("#confirmdelete").modal("hide");
    $scope.delrec = null;
    $scope.delrec_idx = null;
    $scope.del_error = null;
    $scope.delRecordClick = false;
    $scope.revrec = null;
    $scope.delete_revrec = false
  };
  $scope.deleterec = function(rec, idx) { $scope.zone.records.splice($scope.delrec_idx, 1);
    Record.remove({ zone: $routeParams.zone, domain: encodeURIComponent(rec.domain), type: rec.type }, function() {
      if ($scope.delete_revrec && $scope.revrec) { Record.remove({ zone: encodeURIComponent($scope.revrec.zone), domain: encodeURIComponent($scope.revrec.domain), type: $scope.revrec.type }, function() { $scope.cancel_deleterec() }, function(err) { $scope.del_error = err.data.message }) } else { $scope.cancel_deleterec() } }, function(err) { $scope.del_error = err.data.message }) };
  $scope.show_createrec = function() { $scope.create_error = null;
    $scope.create_linked = false;
    $scope.revrec = null;
    $scope.create_revrec = false;
    $("#createrec").modal("show");
    $scope.newanswer = {};
    $scope.rec = { type: "A" } };
  $scope.cancel_createrec = function() { $("#createrec").modal("hide");
    $scope.create_error = null;
    $scope.create_linked = false;
    $scope.revrec = null;
    $scope.create_revrec = false;
    $scope.idomain = null;
    $scope.newanswer = {};
    $scope.spin.zone = false;
    $scope.zone_failure = false;
    delete $scope.rec };
  $scope.updatefromlong = function(longanswer, a) {};
  $scope.createrec = function(rec, idomain, advanced) { rec.zone = decodeURIComponent($routeParams.zone);
    if (idomain) {
      if (idomain.slice(-1) == ".") { rec.domain = idomain + rec.zone } else { rec.domain = idomain + "." + rec.zone } } else { rec.domain = rec.zone }
    if ((!$scope.newanswer || $scope.newanswer == {}) && !advanced) { $scope.create_error = "No answer value specified";
      return } else if (Object.keys($scope.newanswer).length) { rec.answers = [{ answer: AnswerParser.parse(rec.type, $scope.newanswer) }] } else { rec.answers = [] }
    if ($scope.create_linked && $scope.newanswer.link) { rec.link = $scope.newanswer.link;
      rec.answers = [] }
    Record.create({ zone: $routeParams.zone, domain: encodeURIComponent(rec.domain), type: rec.type }, rec, function(r) {
      if ($scope.create_revrec && $scope.reverse_permitted(rec.type)) { RecordAnalyze.get({ zone: $routeParams.zone, domain: encodeURIComponent(rec.domain), type: rec.type }, function(r) {
          if (r && !r.exists) { Record.create({ zone: encodeURIComponent(r.record.zone), domain: encodeURIComponent(r.record.domain), type: r.record.type }, r.record, undefined, function(err) { $scope.create_error = "Could not create reverse record." }) } else { $scope.create_error = "Could not create reverse record." } }, function(err) { $scope.create_error = err.data.message }) }
      if (advanced) { $scope.cancel_createrec();
        $location.path("/zones/" + encodeURIComponent(r.zone) + "/" + encodeURIComponent(r.domain) + "/" + r.type) } else { $scope.spin.zone = true;
        $scope.zone_failure = false;
        $scope.zone = Zone.get({ zone: $routeParams.zone }, function() { $scope.merge_usage();
          $scope.cancel_createrec() }) } }, function(err) { $scope.create_error = err.data.message }) }
}

function RecordCtrl($scope, $injector, $routeParams, $location, DataFeed, DataSource, QPS, Record, RecordAnalyze, FilterTypes, MetaTypes, DataSourceTypes, AnswerParser, NetworkList, Zone, PulsarApps, PulsarJobs) { "use strict";
  $injector.invoke(PortalCtrl, this, { $scope: $scope });
  var myF;
  $scope.sources = DataSource.query({}, $scope.loadsources);
  $scope.promiseB = $scope.sources.$then(function(result) { $scope.sourcemap = {};
    $scope.feedmap = {};
    for (var i = 0; i < $scope.sources.length; i++) {
      var s = $scope.sources[i];
      $scope.sourcemap[s.id] = s;
      for (var j = 0; j < s.feeds.length; j++) { myF = s.feeds[j];
        myF.datasource = s.id;
        $scope.feedmap[myF.id] = myF;
        if (myF.data) { $scope.feed_ptrs_enabled = true } } } });
  $scope.int_countries = { Europe: { "Eastern Europe": ["BG", "BY", "CZ", "HU", "MD", "PL", "RO", "RU", "SK", "UA"], "Western Europe": ["AT", "BE", "CH", "DE", "FR", "LI", "LU", "MC", "NL"], "Southern Europe": ["AD", "AL", "BA", "ES", "GI", "GR", "HR", "IT", "ME", "MK", "MT", "RS", "PT", "SI", "SM", "VA"], "Northern Europe": ["GG", "JE", "AX", "DK", "EE", "FI", "FO", "GB", "IE", "IM", "IS", "LT", "LV", "NO", "SE", "SJ"] }, Oceania: { Melanesia: ["FJ", "NC", "PG", "SB", "VU"], "Australia and New Zealand": ["AU", "NF", "NZ"], Micronesia: ["FM", "GU", "KI", "MH", "MP", "NR", "PW"], Polynesia: ["AS", "CK", "NU", "PF", "PN", "TK", "TO", "TV", "WF", "WS"] }, Africa: { "Southern Africa": ["BW", "LS", "NA", "SZ", "ZA", "BV", "TF", "HM"], "Western Africa": ["BF", "BJ", "CI", "CV", "GH", "GM", "GN", "GW", "LR", "ML", "MR", "NE", "NG", "SH", "SL", "SN", "TG"], "Eastern Africa": ["BI", "DJ", "ER", "ET", "KE", "KM", "MG", "MU", "MW", "MZ", "RE", "RW", "SC", "SO", "TZ", "UG", "YT", "ZM", "ZW"], "Middle Africa": ["AO", "CD", "CF", "CG", "CM", "GA", "GQ", "ST", "TD"], "Northern Africa": ["DZ", "EG", "EH", "LY", "MA", "SD", "TN"] }, Asia: { "Western Asia": ["AE", "AM", "AZ", "BH", "CY", "GE", "IL", "IQ", "JO", "KW", "LB", "OM", "PS", "QA", "SA", "SY", "TR", "YE"], "Southern Asia": ["AF", "BD", "BT", "IN", "IR", "LK", "MV", "NP", "PK", "IO"], "South-Eastern Asia": ["BN", "ID", "KH", "LA", "MM", "MY", "PH", "SG", "TH", "TL", "VN", "CC", "CX"], "Eastern Asia": ["CN", "HK", "JP", "KP", "KR", "MN", "MO", "TW"], "Central Asia": ["TM", "TJ", "KG", "KZ", "UZ"] }, Americas: { "Central America": ["BZ", "CR", "GT", "HN", "MX", "NI", "PA", "SV"], "Northern America": ["BM", "CA", "GL", "PM", "US", "UM"], Caribbean: ["AG", "AI", "AW", "BB", "BL", "BS", "CU", "DM", "DO", "GD", "GP", "HT", "JM", "KN", "KY", "LC", "MF", "MQ", "MS", "PR", "TC", "TT", "VC", "VG", "VI"], "South America": ["AR", "BO", "BR", "CL", "CO", "EC", "FK", "GF", "GY", "PE", "PY", "SR", "UY", "VE", "GS"] } };
  $scope.int_us_states = { "Central US": ["MN", "MT", "MO", "SD", "KS", "NM", "WY", "AR", "CO", "WI", "LA", "IA", "NE", "TX", "ND", "AL", "IL", "OK", "TN", "MS"], "Western US": ["HI", "AK", "CA", "NV", "OR", "WA", "ID", "UT", "AZ"], "Eastern US": ["NY", "SC", "NH", "FL", "OH", "MI", "GA", "DE", "CT", "PA", "MA", "VA", "KY", "ME", "NJ", "IN", "RI", "NC", "WV", "DC", "MD", "VT"] };
  $scope.int_ca_provinces = { "Eastern Canada": ["ON", "QC", "NB", "NS", "PE", "NL"], "Western Canada": ["BC", "YT", "AB", "NT"], "Central Canada": ["SK", "MB", "NU"] };
  $scope.int_iso3166 = { BD: "Bangladesh", BE: "Belgium", BF: "Burkina Faso", BG: "Bulgaria", BA: "Bosnia And Herzegovina", BB: "Barbados", WF: "Wallis And Futuna", BL: "Saint Barthelemy", BM: "Bermuda", BN: "Brunei Darussalam", BO: "Bolivia, Plurinational State Of", BH: "Bahrain", BI: "Burundi", BJ: "Benin", BT: "Bhutan", JM: "Jamaica", BV: "Bouvet Island", BW: "Botswana", WS: "Samoa", BQ: "Bonaire, Sint Eustatius And Saba", BR: "Brazil", BS: "Bahamas", JE: "Jersey", BY: "Belarus", BZ: "Belize", RU: "Russian Federation", RW: "Rwanda", RS: "Serbia", TL: "Timor-Leste", RE: "Reunion", TM: "Turkmenistan", TJ: "Tajikistan", RO: "Romania", TK: "Tokelau", GW: "Guinea-Bissau", GU: "Guam", GT: "Guatemala", GS: "South Georgia And The South Sandwich Islands", GR: "Greece", GQ: "Equatorial Guinea", GP: "Guadeloupe", JP: "Japan", GY: "Guyana", GG: "Guernsey", GF: "French Guiana", GE: "Georgia", GD: "Grenada", GB: "United Kingdom", GA: "Gabon", GN: "Guinea", GM: "Gambia", GL: "Greenland", GI: "Gibraltar", GH: "Ghana", OM: "Oman", TN: "Tunisia", JO: "Jordan", HR: "Croatia", HT: "Haiti", HU: "Hungary", HK: "Hong Kong", HN: "Honduras", HM: "Heard Island And Mcdonald Islands", VE: "Venezuela, Bolivarian Republic Of", PR: "Puerto Rico", PS: "Palestine, State Of", PW: "Palau", PT: "Portugal", KN: "Saint Kitts And Nevis", PY: "Paraguay", IQ: "Iraq", PA: "Panama", PF: "French Polynesia", PG: "Papua New Guinea", PE: "Peru", PK: "Pakistan", PH: "Philippines", PN: "Pitcairn", PL: "Poland", PM: "Saint Pierre And Miquelon", ZM: "Zambia", EH: "Western Sahara", EE: "Estonia", EG: "Egypt", ZA: "South Africa", EC: "Ecuador", IT: "Italy", VN: "Viet Nam", SB: "Solomon Islands", ET: "Ethiopia", SO: "Somalia", ZW: "Zimbabwe", SA: "Saudi Arabia", ES: "Spain", ER: "Eritrea", ME: "Montenegro", MD: "Moldova, Republic Of", MG: "Madagascar", MF: "Saint Martin (French Part)", MA: "Morocco", MC: "Monaco", UZ: "Uzbekistan", MM: "Myanmar", ML: "Mali", MO: "Macao", MN: "Mongolia", MH: "Marshall Islands", MK: "Macedonia, The Former Yugoslav Republic Of", MU: "Mauritius", MT: "Malta", MW: "Malawi", MV: "Maldives", MQ: "Martinique", MP: "Northern Mariana Islands", MS: "Montserrat", MR: "Mauritania", IM: "Isle Of Man", UG: "Uganda", TZ: "Tanzania, United Republic Of", MY: "Malaysia", MX: "Mexico", IL: "Israel", FR: "France", AW: "Aruba", SH: "Saint Helena, Ascension And Tristan Da Cunha", SJ: "Svalbard And Jan Mayen", FI: "Finland", FJ: "Fiji", FK: "Falkland Islands (Malvinas)", FM: "Micronesia, Federated States Of", FO: "Faroe Islands", NI: "Nicaragua", NL: "Netherlands", NO: "Norway", NA: "Namibia", VU: "Vanuatu", NC: "New Caledonia", NE: "Niger", NF: "Norfolk Island", NG: "Nigeria", NZ: "New Zealand", NP: "Nepal", NR: "Nauru", NU: "Niue", CK: "Cook Islands", CI: "Cote D'Ivoire", CH: "Switzerland", CO: "Colombia", CN: "China", CM: "Cameroon", CL: "Chile", CC: "Cocos (Keeling) Islands", CA: "Canada", CG: "Congo", CF: "Central African Republic", CD: "Congo, The Democratic Republic Of The", CZ: "Czech Republic", CY: "Cyprus", CX: "Christmas Island", CR: "Costa Rica", CW: "Curacao", CV: "Cape Verde", CU: "Cuba", SZ: "Swaziland", SY: "Syrian Arab Republic", SX: "Sint Maarten (Dutch Part)", KG: "Kyrgyzstan", KE: "Kenya", SS: "South Sudan", SR: "Suriname", KI: "Kiribati", KH: "Cambodia", SV: "El Salvador", KM: "Comoros", ST: "Sao Tome And Principe", SK: "Slovakia", KR: "Korea, Republic Of", SI: "Slovenia", KP: "Korea, Democratic People'S Republic Of", KW: "Kuwait", SN: "Senegal", SM: "San Marino", SL: "Sierra Leone", SC: "Seychelles", KZ: "Kazakhstan", KY: "Cayman Islands", SG: "Singapore", SE: "Sweden", SD: "Sudan", DO: "Dominican Republic", DM: "Dominica", DJ: "Djibouti", DK: "Denmark", VG: "Virgin Islands, British", DE: "Germany", YE: "Yemen", DZ: "Algeria", US: "United States", UY: "Uruguay", YT: "Mayotte", UM: "United States Minor Outlying Islands", LB: "Lebanon", LC: "Saint Lucia", LA: "Lao People'S Democratic Republic", TV: "Tuvalu", TW: "Taiwan, Province Of China", TT: "Trinidad And Tobago", TR: "Turkey", LK: "Sri Lanka", LI: "Liechtenstein", LV: "Latvia", TO: "Tonga", LT: "Lithuania", LU: "Luxembourg", LR: "Liberia", LS: "Lesotho", TH: "Thailand", TF: "French Southern Territories", TG: "Togo", TD: "Chad", TC: "Turks And Caicos Islands", LY: "Libya", VA: "Holy See (Vatican City State)", VC: "Saint Vincent And The Grenadines", AE: "United Arab Emirates", AD: "Andorra", AG: "Antigua And Barbuda", AF: "Afghanistan", AI: "Anguilla", VI: "Virgin Islands, U.S.", IS: "Iceland", IR: "Iran, Islamic Republic Of", AM: "Armenia", AL: "Albania", AO: "Angola", AQ: "Antarctica", AS: "American Samoa", AR: "Argentina", AU: "Australia", AT: "Austria", IO: "British Indian Ocean Territory", IN: "India", AX: "Aland Islands", AZ: "Azerbaijan", IE: "Ireland", ID: "Indonesia", UA: "Ukraine", QA: "Qatar", MZ: "Mozambique" };
  $scope.spin = { qps: true, record: true, clonerec: false };
  $scope.record_failure = false;
  $injector.invoke(Poller, this, { $scope: $scope, $setup: { func: QPS.get, scopevar: "qps", input: { zone: $routeParams.zone, domain: $routeParams.domain, type: $routeParams.type }, frequency: { 60: 5e3, 120: 3e4, 132: 3e5, 180: 9e5 }, first_success: function() { $scope.spin.qps = false }, first_error: function() { $scope.spin.qps = false }, error: function() { $scope.qps = { qps: 0 } } } });
  $scope.zone = decodeURIComponent($routeParams.zone);
  $scope.zone_name = decodeURIComponent($routeParams.zone);
  $scope.urlzone = encodeURIComponent($routeParams.zone);
  $scope.domain = decodeURIComponent($routeParams.domain);
  $scope.type = $routeParams.type;
  $scope.rec = { type: $scope.type };
  $scope.make_revrec = false;
  $scope.route = $scope.zone + "/" + $scope.domain + "/" + $scope.type;
  $scope.loadrecord = function(r) { $scope.spin.record = false;
    $scope.record_failure = false;
    $scope.record = r;
    $scope.make_revrec = false;
    for (var i = 0; i < $scope.record.filters.length; i++) { $scope.record.filters[i].model = $scope.allfilters[$scope.record.filters[i].filter] }
    $scope.markfirstlast($scope.record.filters);
    $scope.sourcemap = {};
    $scope.feedmap = {};
    for (i = 0; i < $scope.sources.length; i++) {
      var s = $scope.sources[i];
      $scope.sourcemap[s.id] = s;
      for (var j = 0; j < s.feeds.length; j++) {
        var f = s.feeds[j];
        f.datasource = s.id;
        $scope.feedmap[f.id] = f;
        if (f.data) { $scope.feed_ptrs_enabled = true } } }
    $scope.is_feed_ptr = function(val) {
      return typeof val === "object" && val.feed };
    var table_has_feed_ptr = function(table) {
      var result = {};
      for (var key in table) {
        if ($scope.is_feed_ptr(table[key])) { result[key] = table[key] } }
      return result };
    var feed_ptrs = { exist: false, records: {}, regions: {}, answers: {} };
    feed_ptrs.records = table_has_feed_ptr(r.meta);
    for (i = 0; i < $scope.record.regions.length; i++) {
      if ($scope.record.regions[i].meta) { feed_ptrs.regions = table_has_feed_ptr($scope.record.regions[i].meta) } }
    for (i = 0; i < $scope.record.answers.length; i++) {
      if ($scope.record.answers[i].meta) { feed_ptrs.answers = table_has_feed_ptr($scope.record.answers[i].meta) } }
    feed_ptrs.exist = Boolean(Object.keys(feed_ptrs.records).length || Object.keys(feed_ptrs.regions).length || Object.keys(feed_ptrs.answers).length) || $scope.feed_ptrs_enabled;
    $scope.record.feed_ptrs = feed_ptrs;
    for (i = 0; i < $scope.record.answers.length; i++) { $scope.record.answers[i].shortanswer = $scope.record.answers[i].answer.join(" ");
      $scope.record.answers[i].longanswer = AnswerParser.unparse($scope.type, $scope.record.answers[i]) }
    $scope.recwarning = function() {
      return $scope.record.answers.length > 1 && $scope.record.type == "CNAME" && !$scope.record.filters.hasOwnProperty(0) };
    $scope.origrecord = angular.copy($scope.record) };
  $scope.allfilters = FilterTypes.get({}, function() {
    var allmeta = MetaTypes.get({}, function() { $scope.allmeta = [];
      for (var ak in allmeta) {
        if (ak[0] != "$") { $scope.allmeta[ak] = allmeta[ak] } }
      $scope.sources = DataSource.query({}, function() { $scope.allsourcetypes = DataSourceTypes.get({}, function() { $scope.networks = NetworkList.query({}, function() { $scope.networks_by_id = {};
            for (var i = 0; i < $scope.networks.length; i++) { $scope.networks_by_id[$scope.networks[i].network_id] = $scope.networks[i] }
            if ($scope.hasfeature("pulsar_enabled")) { PulsarApps.query({}, function(apps) { $scope.pulsar_apps = apps;
                $scope.pulsar_jobs = [];
                var jobsok = function(n) {
                  return function(jobs) { $scope.pulsar_apps[n].jobs = jobs;
                    for (var j = 0; j < jobs.length; j++) { $scope.pulsar_jobs[jobs[j].jobid] = jobs[j] } } };
                var jobserr = function(n) {
                  return function() {} };
                for (var i = 0; i < $scope.pulsar_apps.length; i++) { $scope.pulsar_apps[i].jobs = [];
                  PulsarJobs.query({ appid: $scope.pulsar_apps[i].appid }, jobsok(i), jobserr(i)) }
                $scope.record = Record.get({ zone: $routeParams.zone, domain: $routeParams.domain, type: $routeParams.type }, $scope.loadrecord, function() { $scope.spin.record = false;
                  $scope.record_failure = true }) }, function() { $scope.spin.record = false;
                $scope.record_failure = true }) } else { $scope.record = Record.get({ zone: $routeParams.zone, domain: $routeParams.domain, type: $routeParams.type }, $scope.loadrecord, function() { $scope.spin.record = false;
                $scope.record_failure = true }) } }, function() { $scope.spin.record = false;
            $scope.record_failure = true }) }, function() { $scope.spin.record = false;
          $scope.record_failure = true }) }, function() { $scope.spin.record = false;
        $scope.record_failure = true }) }, function() { $scope.spin.record = false;
      $scope.record_failure = true }) }, function() { $scope.spin.record = false;
    $scope.record_failure = true });
  $scope.get_valid_filters = function(rectype) {
    var out = {},
      keys, k, F;
    if ($scope.allfilters === undefined) {
      return out }
    keys = Object.keys($scope.allfilters);
    for (k = 0; k < keys.length; k++) { F = $scope.allfilters[keys[k]];
      if (F.rectypes !== undefined && F.rectypes.indexOf(rectype) == -1) {
        continue } else { out[keys[k]] = F } }
    return out };
  $scope.reverse_permitted = function(record_type) {
    return (record_type === "A" || record_type === "AAAA") && $scope.hasfeature("reverse_record") };
  $scope.unchanged = function(rec) {
    return angular.equals(rec, $scope.origrecord) };
  var cleanrec = function(rec) {
    var R = angular.copy(rec);
    if ($scope.feed_ptrs_enabled && R.hasOwnProperty("feeds")) { delete R.feeds }
    for (var i = 0; i < R.answers.length; i++) { delete R.answers[i].shortanswer;
      delete R.answers[i].longanswer;
      if ($scope.feed_ptrs_enabled) { delete R.answers[i].feeds } }
    for (i = 0; i < R.filters.length; i++) { delete R.filters[i].model;
      delete R.filters[i].first;
      delete R.filters[i].last }
    for (i = 0; i < R.regions.length; i++) {
      if ($scope.feed_ptrs_enabled && R.regions.hasOwnProperty("feeds")) { delete R.regions[i].feeds } }
    return R };
  $scope.askLoseRecordChanges = function() {
    if ($scope.recupdateform !== undefined && $scope.recupdateform.$invalid || $scope.unchanged($scope.record)) {
      return false }
    return true };
  $scope.$on("$locationChangeStart", function(event) {
    if ($scope.askLoseRecordChanges()) {
      var answer = confirm("You have unsaved changes. Are you sure you want to leave this page?");
      if (!answer) { event.preventDefault() } } });
  $scope.saverec = function(rec) {
    var R = cleanrec(rec);
    $scope.alerts = [];
    Record.save({ zone: encodeURIComponent(R.zone), domain: encodeURIComponent(R.domain), type: R.type }, R, function(r) { $scope.alerts = ['Saved changes to <span class="badge">' + r.type + "</span> <b>" + r.domain + "</b>"];
      if ($scope.make_revrec && $scope.reverse_permitted(r.type)) { RecordAnalyze.get({ zone: encodeURIComponent(r.zone), domain: encodeURIComponent(r.domain), type: r.type }, function(r) {
          if (r && !r.exists) { Record.create({ zone: encodeURIComponent(r.record.zone), domain: encodeURIComponent(r.record.domain), type: r.record.type }, r.record, function(r) { $scope.alerts.push('Saved changes to <span class="badge">' + r.type + "</span> <b>" + r.domain + "</b>") }, function(err) { $scope.alerts.push("Could not create reverse record.") }) } else { $scope.alerts.push("Reverse record already exists.") } }, function(err) { $scope.alerts.push("Could not create reverse record.") }) }
      $scope.loadrecord(r) }, function(err) { $scope.alerts = ['Unable to save changes to <span class="badge">' + R.type + "</span> <b>" + R.domain + "</b>: " + err.data.message] }) };
  $scope.confirm_delrec = function() { $scope.del_error = null;
    $scope.revrec = null;
    $scope.delete_revrec = false;
    if ($scope.reverse_permitted($scope.type)) { RecordAnalyze.get({ zone: encodeURIComponent($scope.zone), domain: encodeURIComponent($scope.domain), type: $scope.type }, function(r) { $scope.revrec = null;
        if (r && r.exists) { $scope.revrec = r.record } }, function(err) { $scope.revrec = null }) }
    $("#confirmdelrec").modal("show") };
  $scope.cancel_delrec = function() { $("#confirmdelrec").modal("hide");
    $scope.del_error = null;
    $scope.revrec = null;
    $scope.delete_revrec = false };
  $scope.delrec = function() { Record.remove({ zone: encodeURIComponent($scope.zone), domain: encodeURIComponent($scope.domain), type: $scope.type }, function() {
      if ($scope.delete_revrec && $scope.revrec) { Record.remove({ zone: encodeURIComponent($scope.revrec.zone), domain: encodeURIComponent($scope.revrec.domain), type: $scope.revrec.type }, function(r) { $scope.revrec = null;
          $scope.delete_revrec = false }, function(err) { $scope.revrec = null;
          $scope.delete_revrec = false;
          $scope.del_error = err.data.message }) }
      $("#confirmdelrec").modal("hide");
      $location.path("/zones/" + encodeURIComponent($scope.zone)) }, function(err) { $scope.del_error = err.data.message }) };
  $scope.updatefromlong = function(longanswer, a) {
    if (a) { a.answer = AnswerParser.parse($scope.type, longanswer);
      a.shortanswer = a.answer.join(" ");
      a.longanswer = longanswer } };
  $scope.danswer = 0;
  $scope.confirm_delanswer = function(idx) { $scope.danswer = idx;
    $("#confirmdelanswer").modal("show") };
  $scope.cancel_delanswer = function() { $("#confirmdelanswer").modal("hide");
    $scope.danswer = 0 };
  $scope.delanswer = function(idx) { $scope.record.answers.splice(idx, 1);
    $scope.cancel_delanswer() };
  $scope.show_addanswer = function() { $("#addanswer").modal("show");
    $scope.newanswer = {} };
  $scope.cancel_addanswer = function() { $("#addanswer").modal("hide");
    delete $scope.newanswer };
  $scope.addanswer = function(a) {
    var ans = { answer: AnswerParser.parse($scope.type, a), meta: {}, feeds: [] };
    ans.longanswer = AnswerParser.unparse($scope.type, ans);
    ans.shortanswer = ans.answer.join(" ");
    if (a.region !== undefined && a.region !== "None" && a.region !== "") { ans.region = a.region }
    $scope.record.answers.push(ans);
    $scope.cancel_addanswer()
  };
  $scope.dfilter = 0;
  $scope.confirm_delfilter = function(idx) { $scope.dfilter = idx;
    $("#confirmdelfilter").modal("show") };
  $scope.cancel_delfilter = function() { $("#confirmdelfilter").modal("hide");
    $scope.dfilter = 0 };
  $scope.delfilter = function(idx) { $scope.record.filters.splice(idx, 1);
    $scope.markfirstlast($scope.record.filters);
    $scope.record.tier = $scope.gettier($scope.record.filters);
    $scope.cancel_delfilter() };
  $scope.filterup = function(idx) {
    var tmp = $scope.record.filters[idx];
    $scope.record.filters[idx] = $scope.record.filters[idx - 1];
    $scope.record.filters[idx - 1] = tmp;
    $scope.markfirstlast($scope.record.filters) };
  $scope.filterdown = function(idx) {
    var tmp = $scope.record.filters[idx];
    $scope.record.filters[idx] = $scope.record.filters[idx + 1];
    $scope.record.filters[idx + 1] = tmp;
    $scope.markfirstlast($scope.record.filters) };
  $scope.show_addfilter = function() { $("#addfilter").modal("show") };
  $scope.cancel_addfilter = function() { $("#addfilter").modal("hide");
    delete $scope.newfilter };
  $scope.addfilter = function(f) { $scope.record.filters.push(f);
    $scope.markfirstlast($scope.record.filters);
    $scope.record.tier = $scope.gettier($scope.record.filters);
    $scope.cancel_addfilter() };
  $scope.setnewfiltermodel = function(name) { $scope.newfilter = { filter: name, config: {}, model: $scope.allfilters[name] };
    if (name == "shed_load") { $scope.newfilter.config.metric = "loadavg" } };
  $scope.markfirstlast = function(filters) {
    for (var i = 0; i < filters.length; i++) { filters[i].first = false;
      filters[i].last = false }
    if (filters[0]) filters[0].first = true;
    if (filters[filters.length - 1]) filters[filters.length - 1].last = true };
  $scope.gettier = function(filters) {
    var maxtier = 1;
    for (var i = 0; i < filters.length; i++) {
      if (filters[i].model.tier > maxtier) maxtier = filters[i].model.tier }
    return maxtier };
  $scope.confirm_delregion = function(r) { $scope.dregion = r;
    $("#confirmdelregion").modal("show") };
  $scope.cancel_delregion = function() { $("#confirmdelregion").modal("hide");
    delete $scope.dregion };
  $scope.delregion = function(r) {
    for (var i = 0; i < $scope.record.answers.length; i++) {
      if ($scope.record.answers[i].region == r) { delete $scope.record.answers[i].region } }
    delete $scope.record.regions[r];
    $scope.cancel_delregion() };
  $scope.show_addregion = function() { $("#addregion").modal("show") };
  $scope.cancel_addregion = function() { $("#addregion").modal("hide");
    delete $scope.newregion };
  $scope.addregion = function(r) {
    var re = /^(?=.{1,64}$)([a-zA-Z0-9\-_]+)$/;
    if (re.exec(r)) { $scope.record.regions[r] = { meta: {}, feeds: [] };
      $scope.cancel_addregion() } };
  $scope.valid_ip_prefix = function(prefix) {
    if (!prefix) {
      return false }
    var ipv4 = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(\d|[1-2]\d|3[0-2]))$/;
    var ipv6 = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*(\/(\d|\d\d|1[0-1]\d|12[0-8]))$/;
    return prefix.match(ipv4) || prefix.match(ipv6) };
  $scope.valid_asn = function(as) {
    return as > 1 && as < 4294967295 };
  $scope.toggle_meta_subsets = function(metakey, set, subsets, on) {
    var keys = Object.keys(subsets);
    for (var k = 0; k < keys.length; k++) {
      if (keys[k][0] != "$") { $scope.toggle_meta_set(metakey, set, subsets[keys[k]], on) } } };
  $scope.toggle_meta_set = function(metakey, set, entries, on) {
    for (var i = 0; i < entries.length; i++) {
      if (on && !set[entries[i]]) { set[entries[i]] = true } else if (!on && set[entries[i]]) { delete set[entries[i]] } }
    $scope.edmeta[metakey] = Object.keys(set) };
  $scope.update_meta_set = function(metakey, set, entry) {
    if (set[entry]) { delete set[entry] } else { set[entry] = true }
    $scope.edmeta[metakey] = Object.keys(set) };
  $scope.category_labels = { status: "Status details", traffic_parameters: "Traffic management", informational: "Informational", geographical: "Geographical", network: "Network" };
  $scope.init_edmeta_set = function(metakey, edmeta) {
    if (metakey in edmeta) { $scope[metakey] = {};
      for (var k = 0; k < edmeta[metakey].length; k++) { $scope[metakey][edmeta[metakey][k]] = true } } else { $scope[metakey] = {};
      edmeta[metakey] = [] } };
  $scope.init_edmeta = function(edmeta) {
    if (!("latitude" in edmeta)) { edmeta.latitude = 0 }
    if (!("longitude" in edmeta)) { edmeta.longitude = 0 }
    if (!("priority" in edmeta)) { edmeta.priority = 0 }
    if (!("connections" in edmeta)) { edmeta.connections = 0 }
    if (!("requests" in edmeta)) { edmeta.requests = 0 }
    if (!("loadavg" in edmeta)) { edmeta.loadavg = 0 }
    if (!("weight" in edmeta)) { edmeta.weight = 0 }
    if (!("low_watermark" in edmeta)) { edmeta.low_watermark = 0 }
    if (!("high_watermark" in edmeta)) { edmeta.high_watermark = 0 }
    if (!("up" in edmeta)) { edmeta.up = true }
    if ($scope.hasfeature("pulsar_enabled")) {
      if (!("pulsar" in edmeta)) { edmeta.pulsar = [] } else {
        var jobid = edmeta.pulsar[0];
        var gran = edmeta.pulsar[1];
        if (!$scope.pulsar_jobs[jobid]) { edmeta.pulsar = [] } else { edmeta.pulsar_job = $scope.pulsar_jobs[jobid];
          for (var a = 0; a < $scope.pulsar_apps.length; a++) {
            if ($scope.pulsar_apps[a].appid == edmeta.pulsar_job.appid) { edmeta.pulsar_app = $scope.pulsar_apps[a];
              break } }
          if (!edmeta.pulsar_app) { edmeta.pulsar = [] } else { edmeta.pulsar_gran = {};
            if (gran.indexOf("geo") >= 0) { edmeta.pulsar_gran.geo = true }
            if (gran.indexOf("geo_asn") >= 0) { edmeta.pulsar_gran.geo_asn = true } } } } }
    $scope.init_edmeta_set("georegion", edmeta);
    $scope.init_edmeta_set("country", edmeta);
    $scope.init_edmeta_set("us_state", edmeta);
    $scope.init_edmeta_set("ca_province", edmeta);
    $scope.init_edmeta_set("ip_prefixes", edmeta);
    $scope.init_edmeta_set("asn", edmeta) };
  $scope.delmeta = function(obj, key) { delete obj.meta[key] };
  $scope.show_addmeta = function(obj) {
    if (obj.meta === undefined) obj.meta = {};
    $scope.edmeta_obj = obj;
    $scope.edmeta = angular.copy(obj.meta);
    $scope.init_edmeta($scope.edmeta);
    $("#addmeta").modal("show") };
  $scope.cancel_addmeta = function() { $("#addmeta").modal("hide");
    if ($scope.edmetakey) { delete $scope.edmeta[$scope.edmetakey];
      delete $scope.edmetakey }
    delete $scope.edmeta };
  $scope.dataChanged = function() {
    if ($scope.feed_ptrs_enabled) { $scope.addmeta($scope.edmeta_obj, $scope.edmetakey);
      $scope.remove_meta_on_cancel = true;
      $scope.show_editmeta($scope.edmeta_obj, $scope.newObj.key, $scope.newObj.value, $scope.feedmap) } };
  $scope.addmeta = function(obj, key) { $("#addmeta").modal("hide");
    obj.meta[key] = $scope.edmeta[key];
    $scope.newObj = { key: key, value: $scope.edmeta[key] };
    if ($scope.edmetakey) delete $scope.edmetakey;
    delete $scope.edmeta };
  $scope.pulsar_apps_with_valid_jobs = function() {
    var out = [];
    if (!$scope.pulsar_apps) return;
    for (var i = 0; i < $scope.pulsar_apps.length; i++) {
      if ($scope.pulsar_valid_jobs($scope.pulsar_apps[i]).length) { out.push($scope.pulsar_apps[i]) } }
    return out };
  $scope.pulsar_valid_jobs = function(app) {
    var out = [];
    if (!app || !app.jobs) return out;
    for (var i = 0; i < app.jobs.length; i++) {
      if (app.jobs[i].typeid == "latency" || app.jobs[i].typeid == "custom") { out.push(app.jobs[i]) } }
    return out };
  $scope.pulsar_granularities = function(app, job) {
    if (!app || !job) return [];
    if (job.config && job.config.granularities) {
      return job.config.granularities } else if (app.default_config && app.default_config.granularities) {
      return app.default_config.granularities } else {
      return ["geo"] } };
  $scope.init_edmeta_pulsar_gran = function(app, job) {
    var gran = $scope.pulsar_granularities(app, job);
    $scope.edmeta.pulsar_gran = { geo: gran.indexOf("geo") >= 0, geo_asn: gran.indexOf("geo_asn") >= 0 } };
  $scope.show_editmeta = function(obj, key, value, feedmap) { $scope.edmeta = {};
    $scope.edmeta[key] = obj.meta[key];
    $scope.edmeta_obj = obj;
    $scope.edmetakey = key;
    $scope.edmetaorig = obj.meta[key];
    $scope.spin.addfeed = true;
    $scope.addfeed_error = null;
    $scope.newsource = null;
    $scope.newfeed = null;
    if (!obj.feeds) { obj.feeds = [] }
    $scope.feedlist = obj.feeds;
    $scope.newsources = DataSource.query({}, function() { $scope.newsources = $scope.newsources.filter(function(v) {
        var isFeedPtr = false;
        if ($scope.feed_ptrs_enabled) { v.feeds.forEach(function(i, e) {
            if (i.hasOwnProperty("data") && !isFeedPtr) { isFeedPtr = true } });
          return isFeedPtr ? $scope.allsourcetypes[v.sourcetype].compatible_meta.indexOf(key) != -1 : false } else {
          return $scope.allsourcetypes[v.sourcetype].compatible_meta.indexOf(key) != -1 } });
      if ($scope.is_feed_ptr(value)) {
        for (var i = 0; i < $scope.newsources.length; i++) {
          var s = $scope.newsources[i];
          if (s.id == feedmap[value.feed].datasource) { $scope.newsource = s;
            for (var j = 0; j < s.feeds.length; j++) {
              var f = s.feeds[j];
              if (f.id == value.feed) { $scope.newfeed = f } } } } }
      $scope.init_edmeta($scope.edmeta);
      $("#editmeta").modal("show");
      $scope.spin.addfeed = false }, function(err) { $scope.spin.addfeed = false;
      $scope.addfeed_error = "Unable to load feeds at this time: " + err.data.message }) };
  $scope.cancel_editmeta = function() { $("#editmeta").modal("hide");
    $scope.edmeta[$scope.edmetakey] = $scope.edmetaorig;
    if ($scope.remove_meta_on_cancel) { delete $scope.edmeta_obj.meta[$scope.edmetakey] }
    $scope.remove_meta_on_cancel = false;
    delete $scope.edmetakey;
    delete $scope.edmetaorig;
    delete $scope.edmeta };
  $scope.editmeta = function(obj, key) { $("#editmeta").modal("hide");
    if ($scope.newsource && $scope.newfeed) { obj.meta[key] = { feed: $scope.newfeed.id } } else { obj.meta[key] = $scope.edmeta[key] }
    $scope.remove_meta_on_cancel = false;
    delete $scope.edmetakey;
    delete $scope.edmetaorig;
    delete $scope.edmeta };
  $scope.make_pulsar_meta = function(app, job, gran) {
    if (!app || !job || !gran) return null;
    var G = [];
    if (gran.geo) { G.push("geo") }
    if (gran.geo_asn) { G.push("geo_asn") }
    $scope.edmeta.pulsar = [job.jobid, G];
    return $scope.edmeta.pulsar };
  $scope.checkpulsar = function(app, job, gran) {
    if (!$scope.make_pulsar_meta(app, job, gran)) { $scope.badpulsar = true;
      return false }
    $scope.badpulsar = false;
    return true };
  $scope.confirm_delfeed = function(dest, list, idx) { $scope.delsource = $scope.sourcemap[list[idx].source];
    $scope.delfeed = $scope.feedmap[list[idx].feed];
    $scope.delfeed_list = list;
    $scope.delfeed_idx = idx;
    $("#confirmdelfeed").modal("show") };
  $scope.cancel_delfeed = function() { $("#confirmdelfeed").modal("hide");
    $scope.delsource = null;
    $scope.delfeed = null;
    $scope.delfeed_list = null;
    $scope.delfeed_idx = null };
  $scope.deletefeed = function(list, idx) { list.splice(idx, 1);
    $scope.cancel_delfeed() };
  $scope.show_addfeed = function(resource) { $scope.spin.addfeed = true;
    $scope.addfeed_error = null;
    $scope.newsource = null;
    $scope.newfeed = null;
    if (!resource.feeds) { resource.feeds = [] }
    $scope.feedlist = resource.feeds;
    $scope.newsources = DataSource.query({}, function() { $scope.spin.addfeed = false }, function(err) { $scope.spin.addfeed = false;
      $scope.addfeed_error = "Unable to load feeds at this time: " + err.data.message });
    $("#addfeed").modal("show") };
  $scope.cancel_addfeed = function() { $("#addfeed").modal("hide");
    delete $scope.feedlist;
    delete $scope.newsource;
    delete $scope.newfeed };
  $scope.addfeed = function(source, feed, feedlist) { feedlist.push({ source: source.id, feed: feed.id });
    $scope.cancel_addfeed() };
  $scope.show_clonerec = function() { $scope.spin.clonerec = true;
    $scope.clonerec_error = null;
    $("#clonerec").modal("show");
    Zone.query({}, function(zones) { $scope.clonezones = [];
      $scope.clonezone = null;
      for (var z = 0; z < zones.length; z++) {
        if (!zones[z].secondary || !zones[z].secondary.enabled) { $scope.clonezones.push(zones[z].zone);
          if (zones[z].zone == $scope.record.zone) { $scope.clonezone = zones[z].zone } } }
      $scope.clonedomain = null;
      $scope.spin.clonerec = false }, function(err) { $scope.spin.clonerec = false;
      $scope.clonerec_error = "Unable to load zones: " + err.data.message }) };
  $scope.cancel_clonerec = function() { $("#clonerec").modal("hide");
    delete $scope.clonerec_error;
    delete $scope.clonezone;
    delete $scope.clonezones;
    delete $scope.clonedomain };
  $scope.clonerec = function(zone, domain) {
    var R = cleanrec($scope.record);
    R.zone = zone;
    if (domain) {
      if (domain.slice(-1) == ".") { R.domain = domain + R.zone } else { R.domain = domain + "." + R.zone } } else { R.domain = R.zone }
    Record.create({ zone: encodeURIComponent(R.zone), domain: encodeURIComponent(R.domain), type: R.type }, R, function(r) { $scope.cancel_clonerec();
      $location.path("/zones/" + encodeURIComponent(r.zone) + "/" + encodeURIComponent(r.domain) + "/" + r.type) }, function(err) { $scope.clone_error = err.data.message }) } }

function DataSourceCtrl($scope, $injector, DataSource, DataSourceTypes, DataFeed, Job) {
  "use strict";
  $injector.invoke(PortalCtrl, this, { $scope: $scope });
  $scope.feed_ptrs_enabled = false;
  $scope.spin = { sources: true };
  $scope.sources_failure = false;
  $scope.loadsources = function(sources) {
    $scope.spin.sources = false;
    $scope.sources_failure = false;
    $scope.sources = sources;
    for (var i = 0; i < $scope.sources.length; i++) { $scope.sources[i].model = $scope.allsourcetypes[$scope.sources[i].sourcetype];
      var m = $scope.sources[i].model;
      for (var j = 0; j < $scope.sources[i].feeds.length; j++) {
        var f = $scope.sources[i].feeds[j];
        var short = [];
        for (var k in f.config) {
          if (f.config[k]) {
            var cdesc = f.config[k];
            if ($scope.sources[i].sourcetype == "nsone_monitoring" && $scope.jobs[f.config[k]]) { cdesc = $scope.jobs[f.config[k]].name }
            short.push("<b>" + m.feed_config[k].shortdesc + '</b>: <span class="label label-inverse">' + cdesc + "</span>") } }
        f.shortdesc = short.join("&nbsp;&nbsp;") } }
    $scope.cancel_createsource();
    $scope.cancel_createfeed();
    $scope.cancel_editfeed()
  };
  $scope.allsourcetypes = DataSourceTypes.get({}, function() { Job.query({}, function(rsp) { $scope.jobs = {};
      for (var i = 0; i < rsp.length; i++) { $scope.jobs[rsp[i].id] = rsp[i] }
      $scope.sources = DataSource.query({}, $scope.loadsources, function() { $scope.spin.sources = false;
        $scope.sources_failure = true }) }, function() { $scope.spin.sources = false;
      $scope.sources_failure = true }) });
  $scope.confirm_delsource = function(source, idx) { $scope.delsource = source;
    $scope.delsource_idx = idx;
    $scope.del_error = null;
    $("#confirmdelete").modal("show") };
  $scope.cancel_delsource = function() { $("#confirmdelete").modal("hide");
    $scope.delsource = null;
    $scope.delsource_idx = null;
    $scope.del_error = null };
  $scope.deletesource = function(s, idx) { DataSource.remove({ sourceid: encodeURIComponent(s.id) }, function() { $scope.cancel_delsource();
      $scope.sources.splice(idx, 1) }, function(err) { $scope.del_error = err.data.message }) };
  $scope.show_createsource = function(sourcetype) { $scope.create_error = null;
    $scope.source = { sourcetype: sourcetype, model: $scope.allsourcetypes[sourcetype], config: {} };
    $("#createsource").modal("show") };
  $scope.cancel_createsource = function() { $("#createsource").modal("hide");
    $scope.source = null;
    $scope.create_error = null };
  $scope.createsource = function(source) {
    var src = angular.copy(source);
    delete src.model;
    DataSource.create({}, src, function(s) { $scope.sources = DataSource.query({}, $scope.loadsources) }, function(err) { $scope.create_error = err.data.message }) };
  $scope.confirm_delfeed = function(feed, source, idx) { $scope.delfeed = feed;
    $scope.delfeed_source = source;
    $scope.delfeed_idx = idx;
    $scope.delfeed_error = null;
    $("#confirmdelfeed").modal("show") };
  $scope.cancel_delfeed = function() { $("#confirmdelfeed").modal("hide");
    $scope.delfeed = null;
    $scope.delfeed_source = null;
    $scope.delfeed_idx = null;
    $scope.delfeed_error = null };
  $scope.deletefeed = function(feed, source, idx) { DataFeed.remove({ sourceid: encodeURIComponent(source.id), feedid: encodeURIComponent(feed.id) }, function() { $scope.cancel_delfeed();
      source.feeds.splice(idx, 1) }, function(err) { $scope.delfeed_error = err.data.message }) };
  $scope.show_createfeed = function(source) { $scope.createfeed_error = null;
    $scope.newfeed_source = source;
    $scope.newfeed = { destinations: [], config: {} };
    $("#createfeed").modal("show") };
  $scope.cancel_createfeed = function() { $("#createfeed").modal("hide");
    $scope.newfeed = null;
    $scope.newfeed_source = null;
    $scope.createfeed_error = null };
  $scope.createfeed = function(source, feed) {
    var myF;
    DataFeed.create({ sourceid: encodeURIComponent(source.id) }, feed, function(f) { $scope.sources = DataSource.query({}, $scope.loadsources);
      $scope.promiseB = $scope.sources.$then(function(result) { $scope.sourcemap = {};
        $scope.feedmap = {};
        for (var i = 0; i < $scope.sources.length; i++) {
          var s = $scope.sources[i];
          $scope.sourcemap[s.id] = s;
          for (var j = 0; j < s.feeds.length; j++) { myF = s.feeds[j];
            myF.datasource = s.id;
            $scope.feedmap[myF.id] = myF;
            if (myF.data) { $scope.feed_ptrs_enabled = true } } } }) }, function(err) { $scope.createfeed_error = err.data.message }) };
  $scope.show_editfeed = function(source, feed) { $scope.edfeed_error = null;
    $scope.edfeed_source = source;
    $scope.edfeed = feed;
    $("#editfeed").modal("show") };
  $scope.cancel_editfeed = function() { $("#editfeed").modal("hide");
    $scope.edfeed = null;
    $scope.edfeed_source = null;
    $scope.edfeed_error = null };
  $scope.editfeed = function(source, feed) { delete feed.shortdesc;
    DataFeed.save({ sourceid: encodeURIComponent(source.id), feedid: encodeURIComponent(feed.id) }, feed, function(f) { $scope.sources = DataSource.query({}, $scope.loadsources) }, function(err) { $scope.edfeed_error = err.data.message }) }
}

function ReportCtrl($scope, $injector, ActivityLog, ZoneRecordSearch) { "use strict";
  $injector.invoke(PortalCtrl, this, { $scope: $scope });
  $scope.spin = { activity: true };
  $scope.activity_failure = false;
  var end = new Date(Date.now());
  $scope.end = ("0" + (end.getMonth() + 1)).slice(-2) + "/" + ("0" + end.getDate()).slice(-2) + "/" + end.getFullYear();
  var start = new Date(end.getFullYear(), end.getMonth(), 1, 0, 0, 0, 0);
  $scope.start = ("0" + (start.getMonth() + 1)).slice(-2) + "/" + ("0" + start.getDate()).slice(-2) + "/" + start.getFullYear();
  $(".date").each(function() { $(this).datepicker() });
  $scope.zones = {};
  $scope.nozones = true;
  $scope.records = [];
  $scope.norecords = true;
  $scope.delete_zone = function(zone) { delete $scope.zones[zone];
    if (!Object.keys($scope.zones).length) $scope.nozones = true;
    var rdel = [];
    for (var i = 0; i < $scope.records.length; i++)
      if ($scope.records[i].zone == zone) rdel.push(i);
    for (i = rdel.length - 1; i >= 0; i--) { $scope.records.splice(i, 1) }
    if (!$scope.records.length) $scope.norecords = true };
  $scope.delete_record = function(domain, type) {
    for (var i = 0; i < $scope.records.length; i++) {
      if ($scope.records[i].domain == domain && $scope.records[i].type == type) { $scope.records.splice(i, 1);
        if (!$scope.records.length) $scope.norecords = true;
        break } } };
  if ($scope.hasperm("account", "view_activity_log")) { $scope.newest_activity = 0;
    $scope.activity = ActivityLog.query({ limit: 20 }, function() { $scope.spin.activity = false;
      $scope.activity_failure = false;
      if ($scope.activity.length) { $scope.newest_activity = $scope.activity[0].timestamp } }, function(err) { $scope.spin.activity = false;
      $scope.activity_failure = false });
    $scope.has_older = function() {
      return $scope.activity.length >= 20 };
    $scope.has_newer = function() {
      return $scope.activity.length && $scope.newest_activity > $scope.activity[0].timestamp };
    $scope.older = function() {
      if ($scope.has_older()) { $scope.spin.activity = true;
        $scope.activity_failure = false;
        var last = $scope.activity[$scope.activity.length - 1].timestamp;
        $scope.activity = ActivityLog.query({ limit: 20, end: last }, function() { $scope.spin.activity = false;
          $scope.activity_failure = false }, function(err) { $scope.spin.activity = false;
          $scope.activity_failure = true }) } };
    $scope.newer = function() {
      if ($scope.has_newer()) { $scope.spin.activity = true;
        $scope.activity_failure = false;
        $scope.activity = ActivityLog.query({ limit: 20, start: $scope.activity[0].timestamp }, function() { $scope.spin.activity = false;
          $scope.activity_failure = false }, function(err) { $scope.spin.activity = false;
          $scope.activity_failure = true }) } } } }

function AccountSettingsCtrl($scope, $injector, AccountSettings, User, APIKey, Team, UserResendInvite) { "use strict";
  $injector.invoke(PortalCtrl, this, { $scope: $scope });
  var saveicon = "icon-save";
  $scope.saveicon = saveicon;
  $scope.spin = { account: true, teams: true, users: true, apikeys: true, uksettings: false, delteam: false, deluser: false, delapikey: false, resend: false };
  $scope.account_failure = false;
  $scope.teams_failure = false;
  $scope.users_failure = false;
  $scope.apikeys_failure = false;
  var default_perms = { account: { manage_account_settings: true, manage_payment_methods: true, manage_plan: true, manage_teams: true, manage_users: true, manage_apikeys: true, view_activity_log: true, view_invoices: true }, data: { manage_datasources: true, manage_datafeeds: true, push_to_datafeeds: true }, dns: { manage_zones: true, view_zones: true, zones_allow_by_default: true, zones_allow: [], zones_deny: [] }, monitoring: { manage_lists: true, manage_jobs: true, view_jobs: true } };
  var default_notify = { billing: true };
  if ($scope.hasperm("account", "manage_account_settings")) { AccountSettings.get({}, function(a) { $scope.spin.account = false;
      $scope.account_failure = false;
      if (!a.address.country) { a.address.country = "US" }
      $scope.account = a;
      $scope.address = a.address;
      $scope.origaccount = angular.copy($scope.account);
      $scope.alerts = [] }, function(err) { $scope.alerts = ["Unable to fetch account details"];
      $scope.spin.account = false;
      $scope.account_failure = true }) }
  $scope.merge_default_perms = function(guy) {
    if (guy.permissions) {
      for (var i in default_perms) {
        if (i in guy.permissions) {
          for (var j in default_perms[i]) {
            if (!(j in guy.permissions[i])) { guy.permissions[i][j] = angular.copy(default_perms[i][j]) } } } else { guy.permissions[i] = angular.copy(default_perms[i]) } } } else { guy.permissions = angular.copy(default_perms) } };
  $scope.load_teams = function() {
    for (var k = 0; k < $scope.teams.length; k++) { $scope.merge_default_perms($scope.teams[k]) }
    $scope.spin.teams = false;
    $scope.teams_failure = false };
  $scope.load_teams_error = function(err) { $scope.spin.teams = false;
    $scope.teams_failure = true };
  $scope.load_users = function() {
    for (var k = 0; k < $scope.users.length; k++) { $scope.merge_default_perms($scope.users[k]) }
    $scope.spin.users = false;
    $scope.users_failure = false };
  $scope.load_users_error = function(err) { $scope.spin.users = false;
    $scope.users_failure = true };
  $scope.load_api_keys = function() {
    for (var k = 0; k < $scope.apikeys.length; k++) { $scope.apikeys[k].show = false;
      $scope.merge_default_perms($scope.apikeys[k]) }
    $scope.spin.apikeys = false;
    $scope.apikeys_failure = false };
  $scope.load_api_keys_error = function(err) { $scope.spin.apikeys = false;
    $scope.apikeys_failure = true };
  if ($scope.hasperm("account", "manage_teams")) { $scope.teams = Team.query({}, $scope.load_teams, $scope.load_teams_error) }
  if ($scope.hasperm("account", "manage_users")) { $scope.users = User.query({}, $scope.load_users, $scope.load_users_error) }
  if ($scope.hasperm("account", "manage_apikeys")) { $scope.apikeys = APIKey.query({}, $scope.load_api_keys, $scope.load_api_keys_error) }
  $scope.unchanged = function(account) {
    return angular.equals(account, $scope.origaccount) };
  $scope.saveaccount = function(account) { $scope.saveicon = "icon-spin icon-spinner";
    AccountSettings.save(account, function(a) { $scope.saveicon = saveicon;
      if (!a.address.country) { a.address.country = "US" }
      $scope.account = a;
      $scope.address = a.address;
      $scope.origaccount = angular.copy($scope.account);
      $scope.alerts = [] }, function(err) { $scope.saveicon = saveicon;
      $scope.alerts = ["Unable to save new account details: " + err.data.message] }) };
  $scope.resend_invite = function(user) { $scope.resend_user = user;
    $scope.resend_error = null;
    $scope.spin.resend = true;
    $("#resend").modal("show");
    UserResendInvite.save({ username: encodeURIComponent($scope.resend_user.username) }, {}, function() { $scope.spin.resend = false }, function(err) { $scope.spin.resend = false;
      $scope.resend_error = "Unable to send invite at this time: " + err.data.message }) };
  $scope.cancel_resend = function() { $("#resend").modal("hide");
    $scope.resend_error = null;
    $scope.spin.resend = false };
  $scope.confirm_deluser = function(user, list, idx) { $scope.deluser = user;
    $scope.deluser_list = list;
    $scope.deluser_idx = idx;
    $scope.deluser_error = null;
    $scope.spin.deluser = false;
    $("#confirmdeluser").modal("show") };
  $scope.cancel_deluser = function() { $("#confirmdeluser").modal("hide");
    $scope.deluser = null;
    $scope.deluser_list = null;
    $scope.deluser_idx = null;
    $scope.deluser_error = null };
  $scope.deleteuser = function(user, list, idx) { $scope.spin.deluser = true;
    User.remove({ username: encodeURIComponent(user.username) }, function() { $scope.spin.deluser = false;
      list.splice(idx, 1);
      $scope.cancel_deluser() }, function(err) { $scope.spin.deluser = false;
      $scope.deluser_error = err.data.message }) };
  $scope.confirm_delapikey = function(key, list, idx) { $scope.spin.delapikey = false;
    $scope.delapikey = key;
    $scope.delapikey_list = list;
    $scope.delapikey_idx = idx;
    $scope.delapikey_error = null;
    $("#confirmdelapikey").modal("show") };
  $scope.cancel_delapikey = function() { $("#confirmdelapikey").modal("hide");
    $scope.delapikey = null;
    $scope.delapikey_list = null;
    $scope.delapikey_idx = null;
    $scope.delapikey_error = null };
  $scope.deleteapikey = function(key, list, idx) { $scope.spin.delapikey = true;
    APIKey.remove({ id: encodeURIComponent(key.id) }, function() { $scope.spin.delapikey = false;
      list.splice(idx, 1);
      $scope.cancel_delapikey() }, function(err) { $scope.spin.delapikey = false;
      $scope.delapikey_error = err.data.message }) };
  $scope.confirm_delteam = function(team, list, idx) { $scope.spin.delteam = false;
    $scope.delteam = team;
    $scope.delteam_list = list;
    $scope.delteam_idx = idx;
    $scope.delteam_error = null;
    $("#confirmdelteam").modal("show") };
  $scope.cancel_delteam = function() { $("#confirmdelteam").modal("hide");
    $scope.delteam = null;
    $scope.delteam_list = null;
    $scope.delteam_idx = null;
    $scope.delteam_error = null };
  $scope.deleteteam = function(team, list, idx) { $scope.spin.delteam = true;
    Team.remove({ id: encodeURIComponent(team.id) }, function() { $scope.spin.delteam = false;
      list.splice(idx, 1);
      $scope.cancel_delteam() }, function(err) { $scope.spin.delteam = false;
      $scope.delteam_error = err.data.message }) };
  $scope.create_edit_team_success = function() { $scope.spin.teams = false;
    $scope.spin.teams_failure = false;
    $scope.teams = Team.query({}, function() { $scope.load_teams();
      $scope.cancel_uksettings() }, function(err) { $scope.load_teams_error();
      $scope.cancel_uksettings() }) };
  $scope.create_edit_apikey_success = function() { $scope.spin.apikeys = false;
    $scope.spin.apikeys_failure = false;
    $scope.apikeys = APIKey.query({}, function() { $scope.load_api_keys();
      $scope.cancel_uksettings() }, function(err) { $scope.load_api_keys_error();
      $scope.cancel_uksettings() }) };
  $scope.create_edit_user_success = function() { $scope.spin.users = false;
    $scope.spin.users_failure = false;
    $scope.users = User.query({}, function() { $scope.load_users();
      $scope.cancel_uksettings() }, function(err) { $scope.load_users_error();
      $scope.cancel_uksettings() }) };
  $scope.create_edit_fail = function(err) { $scope.spin.uksettings = false;
    $scope.uksettings_error = err.data.message };
  $scope.create_team = function(team) { $scope.spin.uksettings = true;
    $scope.render_zone_perms_list(team);
    Team.create({}, team, $scope.create_edit_team_success, $scope.create_edit_fail) };
  $scope.create_apikey = function(key) { $scope.spin.uksettings = true;
    if (key.show) { delete key[show] }
    $scope.render_zone_perms_list(key);
    APIKey.create({}, key, $scope.create_edit_apikey_success, $scope.create_edit_fail) };
  $scope.create_user = function(user) { $scope.spin.uksettings = true;
    $scope.render_zone_perms_list(user);
    User.create({}, user, $scope.create_edit_user_success, $scope.create_edit_fail) };
  $scope.edit_apikey = function(key) { $scope.spin.uksettings = true;
    if (key.show !== null) { delete key.show }
    $scope.render_zone_perms_list(key);
    APIKey.save({ id: key.id }, key, $scope.create_edit_apikey_success, $scope.create_edit_fail) };
  $scope.edit_team = function(team) { $scope.spin.uksettings = true;
    $scope.render_zone_perms_list(team);
    Team.save({ id: team.id }, team, $scope.create_edit_team_success, $scope.create_edit_fail) };
  var add_remove_team_fail = function(err) { $scope.alerts = [err.data.message] };
  var add_to_team = function(entity, team) {
    if (entity.teams !== undefined) {
      var idx = entity.teams.indexOf(team.id);
      if (idx == -1) { entity.teams.push(team.id) } else {
        return false } } else { entity.teams = new Array(team.id) }
    return true };
  $scope.add_user_to_team = function(user, team) {
    var noop = function() {};
    for (var i = 0; i < $scope.users.length; i++) {
      if ($scope.users[i].username == user.username) {
        if (add_to_team($scope.users[i], team)) { User.save({ username: user.username }, $scope.users[i], noop, add_remove_team_fail) }
        return } } };
  $scope.add_apikey_to_team = function(key, team) {
    var noop = function() {};
    for (var i = 0; i < $scope.apikeys.length; i++) {
      if ($scope.apikeys[i].id == key.id) {
        if (add_to_team($scope.apikeys[i], team)) { APIKey.save({ id: key.id }, $scope.apikeys[i], noop, add_remove_team_fail) }
        return } } };
  var remove_from_team = function(entity, team) {
    if (entity.teams !== undefined) {
      var idx = entity.teams.indexOf(team.id);
      if (idx > -1) { entity.teams.splice(idx, 1);
        return true } }
    return false };
  $scope.remove_user_from_team = function(user, team) {
    if (remove_from_team(user, team)) { User.save({ username: user.username }, user, function() {}, add_remove_team_fail) } };
  $scope.remove_apikey_from_team = function(key, team) {
    if (remove_from_team(key, team)) { APIKey.save({ id: key.id }, key, function() {}, add_remove_team_fail) } };
  $scope.is_in_team = function(entity, team) {
    return entity !== undefined && entity != null && entity.teams !== undefined && entity.teams.indexOf(team.id) != -1 };
  $scope.empty_team = function(team, users, apikeys) {
    for (var i = 0; i < users.length; i++) {
      if ($scope.is_in_team(users[i], team)) return false }
    for (i = 0; i < apikeys.length; i++) {
      if ($scope.is_in_team(apikeys[i], team)) return false }
    return true };
  $scope.toggle_team = function(entity, team) {
    if ($scope.is_in_team(entity, team)) { remove_from_team(entity, team) } else { add_to_team(entity, team) } };
  $scope.edit_user = function(user) { $scope.spin.uksettings = true;
    $scope.render_zone_perms_list(user);
    User.save({ username: $scope.uksettings_cur_user }, user, $scope.create_edit_user_success, $scope.create_edit_fail) };
  $scope.set_group_perms = function(obj, group, value) {
    var perms = obj.permissions;
    if (perms[group]) {
      for (var k in perms[group]) {
        if (group == "account" && k == "manage_users" && obj.username == $scope.username) {
          continue }
        if (typeof perms[group][k] === "boolean") { perms[group][k] = value } } } };
  $scope.group_check_from_children = function(perms, groups, hide) {
    for (var group in groups) {
      if (perms[group]) {
        var saw_t = false,
          saw_f = false;
        for (var k in perms[group]) {
          if (typeof perms[group][k] === "boolean") {
            if (perms[group][k]) { saw_t = true } else { saw_f = true } } }
        if (saw_t && saw_f) { groups[group] = null } else if (saw_t) { groups[group] = true } else { groups[group] = false } } } };
  $scope.render_zone_perms_list = function(guy) {
    var z;
    guy.permissions.dns.zones_allow = Object.keys($scope.zones_allow);
    guy.permissions.dns.zones_deny = Object.keys($scope.zones_deny) };
  $scope.prep_zone_perms_list = function(guy) { $scope.zones_allow = {};
    $scope.zones_deny = {};
    var z;
    for (z = 0; z < guy.permissions.dns.zones_allow.length; z++) { $scope.zones_allow[guy.permissions.dns.zones_allow[z]] = true }
    for (z = 0; z < guy.permissions.dns.zones_deny.length; z++) { $scope.zones_deny[guy.permissions.dns.zones_deny[z]] = true }
    if (guy.permissions.dns.zones_allow_by_default) { $scope.zones = $scope.zones_deny } else { $scope.zones = $scope.zones_allow } };
  $scope.remove_zone_perm = function(zone) {
    if ($scope.zones[zone]) { delete $scope.zones[zone] } };
  $scope.toggle_zone_perms_list = function(perms) {
    if (perms.dns.zones_allow_by_default) { $scope.zones = $scope.zones_deny } else { $scope.zones = $scope.zones_allow } };
  $scope.show_uksettings = function() { $scope.uksettings_error = null;
    $scope.prep_zone_perms_list($scope.uksettings_obj);
    $scope.permsgroup = { account: false, data: false, dns: false, monitoring: false };
    $scope.permshide = { account: true, data: true, dns: true, monitoring: true };
    $scope.group_check_from_children($scope.uksettings_obj.permissions, $scope.permsgroup);
    $scope.spin.uksettings = false;
    $("#uksettings").modal("show") };
  $scope.show_adduser = function() { $scope.uksettings_obj = { teams: [], permissions: angular.copy(default_perms), notify: angular.copy(default_notify) };
    $scope.uksettings_type = "createuser";
    $scope.uksettings_submit = $scope.create_user;
    $scope.show_uksettings() };
  $scope.show_edituser = function(user) { $scope.uksettings_cur_user = angular.copy(user.username);
    $scope.uksettings_obj = user;
    $scope.uksettings_type = "edituser";
    $scope.uksettings_submit = $scope.edit_user;
    $scope.show_uksettings() };
  $scope.show_addteam = function() { $scope.uksettings_obj = { permissions: angular.copy(default_perms) };
    $scope.uksettings_type = "createteam";
    $scope.uksettings_submit = $scope.create_team;
    $scope.show_uksettings() };
  $scope.show_editteam = function(team) { $scope.uksettings_obj = team;
    $scope.uksettings_type = "editteam";
    $scope.uksettings_submit = $scope.edit_team;
    $scope.show_uksettings() };
  $scope.show_addapikey = function() { $scope.uksettings_obj = { teams: [], permissions: angular.copy(default_perms) };
    $scope.uksettings_type = "createkey";
    $scope.uksettings_submit = $scope.create_apikey;
    $scope.show_uksettings() };
  $scope.show_editapikey = function(key) { $scope.uksettings_obj = key;
    $scope.uksettings_type = "editkey";
    $scope.uksettings_submit = $scope.edit_apikey;
    $scope.show_uksettings() };
  $scope.cancel_uksettings = function() { $("#uksettings").modal("hide");
    $scope.uksettings_obj = null;
    $scope.uksettings_error = null;
    $scope.spin.uksettings = false } }

function AccountBillingCtrl($scope, $injector, $timeout, $cookieStore, Invoice, PaymentMethod, Plan, PlanTypes, BillAtAGlance, UsageWarnings) { "use strict";
  $injector.invoke(PortalCtrl, this, { $scope: $scope });
  $scope.spin = { plan: true, paymentmethods: true, invoices: true, delpm: false, addpm: false, plan_change: false, bag: true, usagewarnings: true };
  $scope.plan_failure = false;
  $scope.paymentmethods_failure = false;
  $scope.invoices_failure = false;
  $scope.usagewarnings_failure = false;
  if ($scope.hasperm("account", "manage_plan")) { $scope.load_plans = function() { $scope.plan = Plan.get({}, function() { $scope.plan.active = true;
        $scope.minp_plans = {};
        PlanTypes.query({}, function(plantypes) { $scope.plantypes = [$scope.plan];
          $scope.minp_plans[$scope.plan.type] = $scope.plan;
          angular.forEach(plantypes, function(plan) {
            if (plan.type != $scope.plan.type || plan.period != $scope.plan.period) { $scope.plantypes.push(plan);
              if (!$scope.minp_plans[plan.type] || plan.monthly_price < $scope.minp_plans[plan.type].monthly_price) { $scope.minp_plans[plan.type] = plan } } });
          $scope.spin.plan = false;
          $scope.plan_failure = false }, function() { $scope.spin.plan = false;
          $scope.plan_failure = true }) }, function() { $scope.spin.plan = false;
        $scope.plan_failure = true }) };
    $scope.load_plans();
    $scope.period_names = { monthly: "Monthly", quarterly: "Quarterly", semiannual: "Semi-annually", annual: "Annually" };
    $scope.period_months = { monthly: 1, quarterly: 3, semiannual: 6, annual: 12 };
    $scope.find_plan = function(type, period) {
      if (!$scope.plantypes) {
        return null }
      for (var i = 0; i < $scope.plantypes.length; i++) {
        if ($scope.plantypes[i].type == type && $scope.plantypes[i].period == period) {
          return $scope.plantypes[i] } }
      return null };
    $scope.find_price = function(type, period) {
      var plan = $scope.find_plan(type, period);
      if (plan) {
        return plan.monthly_price } else {
        return "0.00" } };
    $scope.find_cost = function(type, period) {
      var plan = $scope.find_plan(type, period);
      if (plan) {
        return plan.recurring_cost } else {
        return "0.00" } };
    $scope.perc_savings = function(type, period) {
      var selected = $scope.find_plan(type, period);
      var monthly = $scope.find_plan(type, "monthly");
      if (!selected || !monthly || !selected.monthly_price || !monthly.monthly_price) {
        return 0 }
      return 100 * (monthly.monthly_price - selected.monthly_price) / monthly.monthly_price };
    $scope.show_plan_details = function(plan) { $("#plan_details").modal("show") };
    $scope.cancel_plan_details = function() { $("#plan_details").modal("hide") };
    $scope.show_plan_change = function(type, period) { $scope.newplan = { type: type, period: period, notes: null };
      $scope.spin.plan_change = false;
      $scope.plan_change_error = null;
      $scope.cur_step = 0;
      $scope.cur_step_name = "Choose your plan";
      if ($scope.paymentmethods.length) { $scope.steps = 2 } else { $scope.steps = 3 }
      $("#plan_change").modal("show") };
    $scope.cancel_plan_change = function() { $("#plan_change").modal("hide") };
    $scope.can_change_plan = function(plan, newplan) {
      return plan && newplan && plan.type == "startup" && newplan.type != "enterprise" && !plan.locked && ($scope.paymentmethods.length || $scope.hasperm("account", "manage_payment_methods")) };
    $scope.plan_contact_submit = function() { $scope.spin.plan_change = true;
      Plan.save($scope.newplan, function() { $scope.alerts = ["We'll be in touch soon about your new plan!"];
        $scope.cancel_plan_change() }, function(err) { $scope.spin.plan_change = false;
        $scope.plan_change_error = err.data.message }) };
    $scope.plan_upgrade_submit = function() {
      if ($scope.cur_step === 0) { $scope.cur_step = 1;
        if ($scope.paymentmethods.length) { $scope.cur_step_name = "Checkout" } else { $scope.cur_step_name = "Billing details";
          $scope.addpm_expires = null;
          $scope.addpm = { type: "creditcard", address: { country: "US" } };
          $scope.address = $scope.addpm.address;
          $("input.cc-number").payment("formatCardNumber");
          $("input.cc-exp").payment("formatCardExpiry");
          $("input.cc-cvc").payment("formatCardCVC") }
        $scope.plan_change_error = null } else if ($scope.cur_step === 1 && !$scope.paymentmethods.length) { $scope.addpm.cc_number = $scope.addpm.cc_number.replace(/\s+/g, "");
        $scope.spin.plan_change = true;
        PaymentMethod.create({}, $scope.addpm, function() {
          var newpms = PaymentMethod.query({}, function() { $scope.paymentmethods = newpms;
            $scope.spin.plan_change = false;
            $scope.paymentmethods_failure = false;
            $scope.cur_step = 2;
            $scope.cur_step_name = "Checkout";
            $scope.plan_change_error = null }, function(err) { $scope.spin.plan_change = false;
            $scope.paymentmethods_failure = true;
            $scope.plan_change_error = err.data.message }) }, function(err) { $scope.spin.plan_change = false;
          if (err.data.message) { $scope.plan_change_error = err.data.message } else { $scope.plan_change_error = "Unable to add card, please try again shortly." } }) } else if ($scope.cur_step === 1 && $scope.paymentmethods.length || $scope.cur_step === 2) { $scope.spin.plan_change = true;
        Plan.save($scope.newplan, function() { $scope.spin.plan = true;
          $scope.spin.plan_change = false;
          $scope.cancel_plan_change();
          $scope.load_plans() }, function(err) { $scope.spin.plan_change = false;
          $scope.plan_change_error = err.data.message }) } } }
  if ($scope.hasperm("account", "manage_payment_methods")) { $scope.paymentmethods = PaymentMethod.query({}, function() { $scope.spin.paymentmethods = false;
      $scope.paymentmethods_failure = false }, function() { $scope.spin.paymentmethods = false;
      $scope.paymentmethods_failure = true });
    $scope.confirm_delpm = function(pm) { $scope.spin.delpm = false;
      $scope.delpm_error = null;
      $scope.delpm = pm;
      $("#confirmdelpm").modal("show") };
    $scope.cancel_delpm = function() { $scope.delpm = null;
      $("#confirmdelpm").modal("hide") };
    $scope.deletepm = function(pm) { $scope.spin.delpm = true;
      PaymentMethod.remove({ id: pm.id }, function() {
        var newpms = PaymentMethod.query({}, function() { $scope.paymentmethods = newpms;
          $scope.spin.delpm = false;
          $scope.paymentmethods_failure = false;
          $scope.cancel_delpm() }, function() { $scope.spin.delpm = false;
          $scope.paymentmethods_failure = true;
          $scope.cancel_delpm() }) }, function(err) { $scope.spin.delpm = false;
        $scope.delpm_error = err.data.message }) };
    $scope.paymentmethod_make_default = function(pm) {
      var cur = null;
      for (var i = 0; i < $scope.paymentmethods.length; i++) {
        if ($scope.paymentmethods[i].default === true) { $scope.paymentmethods[i].default = false;
          cur = $scope.paymentmethods[i];
          break } }
      pm.default = true;
      PaymentMethod.save({ id: pm.id }, {}, function() {}, function(err) { cur.default = true;
        pm.default = false;
        if (err.data.message) { $scope.alerts = [err.data.message] } else { $scope.alerts = ["Unable to save changes, please try again shortly."] } }) };
    $scope.show_addpm = function() { $scope.spin.addpm = false;
      $scope.addpm_expires = null;
      $scope.addpm_error = null;
      $scope.addpm = { type: "creditcard", address: { country: "US" } };
      $scope.address = $scope.addpm.address;
      $("input.cc-number").payment("formatCardNumber");
      $("input.cc-exp").payment("formatCardExpiry");
      $("input.cc-cvc").payment("formatCardCVC");
      $("#addpm").modal("show") };
    $scope.cancel_addpm = function() { $scope.addpm = null;
      $("#addpm").modal("hide") };
    $scope.addpm_submit = function(pm) { pm.cc_number = pm.cc_number.replace(/\s+/g, "");
      $scope.spin.addpm = true;
      PaymentMethod.create({}, pm, function() {
        var newpms = PaymentMethod.query({}, function() { $scope.paymentmethods = newpms;
          $scope.spin.addpm = false;
          $scope.paymentmethods_failure = false;
          $scope.cancel_addpm() }, function() { $scope.spin.addpm = false;
          $scope.paymentmethods_failure = true;
          $scope.cancel_addpm() }) }, function(err) { $scope.spin.addpm = false;
        if (err.data.message) { $scope.addpm_error = err.data.message } else { $scope.addpm_error = "Unable to add card, please try again shortly." } }) };
    $scope.addpm_submitok = function(form) {
      if (!$scope[form] || $scope[form].$invalid || !$scope.addpm) {
        return false }
      if (!$.payment.validateCardNumber($scope.addpm.cc_number) || !$.payment.validateCardExpiry($scope.addpm.cc_expire_month, $scope.addpm.cc_expire_year) || !$.payment.validateCardCVC($scope.addpm.cc_cvv2, $scope.addpm.cc_type)) {
        return false }
      return true };
    $scope.addpm_set_cc_type = function(pm) { $scope.addpm.cc_type = $.payment.cardType(pm.cc_number) };
    $scope.addpm_set_expires = function(exp) {
      var e = $.payment.cardExpiryVal(exp);
      if (e.month && e.year) { $scope.addpm.cc_expire_month = e.month;
        $scope.addpm.cc_expire_year = e.year } } }
  if ($scope.hasperm("account", "view_invoices")) { $injector.invoke(Poller, this, { $scope: $scope, $setup: { func: BillAtAGlance.get, scopevar: "bag", frequency: { 12: 3e5, 36: 9e5 }, first_success: function() { $scope.spin.bag = false;
          $scope.bag_failure = false }, first_error: function() { $scope.spin.bag = false;
          $scope.bag_failure = true } } });
    $scope.show_access_fees = function(bag) {
      if (bag.resolved) {
        return bag.totals.access_charge > 0 || bag.static.access_charge > 0 || bag.dynamic.access_charge > 0 || bag.intelligent.access_charge > 0 } };
    $scope.get_next_plan = function(plan) {
      var next = { startup: "business", business: "pro", pro: "enterprise", enterprise: "enterprise" };
      if (next[plan]) {
        return next[plan] } else {
        return "business" } };
    $scope.invoices = Invoice.query({}, function() { $scope.spin.invoices = false;
      $scope.invoices_failure = false;
      for (var i = 0; i < $scope.invoices.length; i++) {
        var sts = $cookieStore.get("apikey") + $scope.invoices[i].id + $scope.invoices[i].sent;
        $scope.invoices[i].authtoken = $.sha1(sts) } }, function() { $scope.spin.invoices = false;
      $scope.invoices_failure = true }) }
  if ($scope.hasperm("account", "manage_account_settings")) { $scope.usagewarnings = UsageWarnings.get({}, function() { $scope.spin.usagewarnings = false;
      $scope.usagewarnings_failure = false }, function(err) { $scope.spin.usagewarnings = false;
      $scope.usagewarnings_failure = true });
    $scope.save_usagewarnings = function(changed) {
      if ($scope.usagewarningsform.$invalid) {
        return }
      if ($scope.usagewarnings.queries.warning_1 > $scope.usagewarnings.queries.warning_2) {
        if (changed == 1) { $scope.usagewarnings.queries.warning_2 = Math.min($scope.usagewarnings.queries.warning_1 + 10, 100) } else { $scope.usagewarnings.queries.warning_1 = Math.max($scope.usagewarnings.queries.warning_2 - 10, 0) } }
      if ($scope.usagewarnings.records.warning_1 > $scope.usagewarnings.records.warning_2) {
        if (changed == 1) { $scope.usagewarnings.records.warning_2 = Math.min($scope.usagewarnings.records.warning_1 + 10, 100) } else { $scope.usagewarnings.records.warning_1 = Math.max($scope.usagewarnings.records.warning_2 - 10, 0) } }
      var wait = 1e3;
      if (changed === 0) { wait = 0 }
      if ($scope.pending_usagewarnings_save) { $timeout.cancel($scope.pending_usagewarnings_save) }
      $scope.pending_usagewarnings_save = $timeout(function() { UsageWarnings.save($scope.usagewarnings, function() {}, function(err) { $scope.alerts = ["Unable to save Usage Warning settings, please try again shortly."] }) }, wait) } } }

function NotificationCtrl($scope, $injector, List, NotifyTypes, DataSource, User) {
  "use strict";
  $injector.invoke(PortalCtrl, this, { $scope: $scope });
  $scope.spin = { lists: true };
  $scope.lists_failure = false;
  $scope.loadlists = function(lists) { $scope.spin.lists = false;
    $scope.lists_failure = false;
    $scope.lists = lists;
    for (var i = 0; i < $scope.lists.length; i++) {
      for (var j = 0; j < $scope.lists[i].notify_list.length; j++) {
        var n = $scope.lists[i].notify_list[j];
        n.model = $scope.allnotifytypes[n.type];
        var short = [];
        for (var k in n.config) {
          if (n.config[k]) {
            var cdesc = n.config[k];
            if (n.type == "datafeed" && $scope.datasources[n.config[k]]) { cdesc = $scope.datasources[n.config[k]].name }
            short.push("<b>" + n.model.config[k].shortdesc + '</b>: <span class="label label-inverse">' + cdesc + "</span>") } }
        n.shortdesc = short.join("&nbsp;&nbsp;") } }
    $scope.cancel_createlist();
    $scope.cancel_addnotifier();
    $scope.cancel_editnotifier() };
  NotifyTypes.get({}, function(ntypes) { $scope.allnotifytypes = ntypes;
    var keys = Object.keys(ntypes);
    for (var k = 0; k < keys.length; k++) {
      if (keys[k][0] == "$") { delete $scope.allnotifytypes[keys[k]] } }
    DataSource.query({}, function(rsp) { $scope.datasources = {};
      for (var i = 0; i < rsp.length; i++) {
        if (rsp[i].sourcetype == "nsone_monitoring") { $scope.datasources[rsp[i].id] = rsp[i] } }
      $scope.users = User.query({}, function() { $scope.lists = List.query({}, $scope.loadlists, function() { $scope.spin.lists = false;
          $scope.lists_failure = true }) }, function() { $scope.spin.lists = false;
        $scope.lists_failure = true }) }, function() { $scope.spin.lists = false;
      $scope.lists_failure = true }) });
  $scope.confirm_dellist = function(list, idx) { $scope.dellist = list;
    $scope.dellist_idx = idx;
    $scope.del_error = null;
    $("#confirmdelete").modal("show") };
  $scope.cancel_dellist = function() { $("#confirmdelete").modal("hide");
    $scope.dellist = null;
    $scope.dellist_idx = null;
    $scope.del_error = null };
  $scope.deletelist = function(l, idx) { List.remove({ listid: encodeURIComponent(l.id) }, function() { $scope.cancel_dellist();
      $scope.lists.splice(idx, 1) }, function(err) { $scope.del_error = err.data.message }) };
  $scope.show_createlist = function() { $scope.create_error = null;
    $scope.list = { notify_list: [] };
    $("#createlist").modal("show") };
  $scope.cancel_createlist = function() { $("#createlist").modal("hide");
    $scope.list = null;
    $scope.create_error = null };
  $scope.createlist = function(list) {
    var l = angular.copy(list);
    for (var i = 0; i < l.notify_list.length; i++) { delete l.notify_list[i].model;
      delete l.notify_list[i].shortdesc }
    List.create({}, l, function(lst) { $scope.lists = List.query({}, $scope.loadlists) }, function(err) { $scope.create_error = err.data.message }) };
  $scope.show_editlist = function(list) { $scope.edlist_error = null;
    $scope.edlist = list;
    $("#editlist").modal("show") };
  $scope.cancel_editlist = function() { $("#editlist").modal("hide");
    $scope.edlist = null;
    $scope.edlist_error = null };
  $scope.editlist = function(list) {
    var l = angular.copy(list);
    for (var i = 0; i < l.notify_list.length; i++) { delete l.notify_list[i].model;
      delete l.notify_list[i].shortdesc }
    List.save({ listid: encodeURIComponent(l.id) }, l, function(lst) { $scope.cancel_editlist() }, function(err) { $scope.edlist_error = err.data.message }) };
  $scope.deletenotifier = function(notifier, list, idx) {
    list.notify_list.splice(idx, 1);
    var l = angular.copy(list);
    for (var i = 0; i < l.notify_list.length; i++) { delete l.notify_list[i].model;
      delete l.notify_list[i].shortdesc }
    List.save({ listid: encodeURIComponent(l.id) }, l, function(lst) {}, function(err) {
      $scope.alerts = angular.copy([err.data.message])
    })
  };
  $scope.show_addnotifier = function(list) { $scope.addnotifier_error = null;
    $scope.newnotifier_list = list;
    $scope.newnotifier = { config: {} };
    $("#addnotifier").modal("show") };
  $scope.cancel_addnotifier = function() { $("#addnotifier").modal("hide");
    $scope.newnotifier = null;
    $scope.newnotifier_list = null;
    $scope.addnotifier_error = null };
  $scope.addnotifier = function(list, notifier) { list.notify_list.push(notifier);
    var l = angular.copy(list);
    for (var i = 0; i < l.notify_list.length; i++) { delete l.notify_list[i].model;
      delete l.notify_list[i].shortdesc }
    List.save({ listid: encodeURIComponent(l.id) }, l, function(lst) { $scope.loadlists($scope.lists);
      $scope.cancel_addnotifier() }, function(err) { $scope.addnotifier_error = err.data.message }) };
  $scope.show_editnotifier = function(list, notifier) { $scope.ednotifier_error = null;
    $scope.ednotifier_list = list;
    $scope.ednotifier = notifier;
    $scope.ednotifier.model = $scope.allnotifytypes[notifier.type];
    $("#editnotifier").modal("show") };
  $scope.cancel_editnotifier = function() { $("#editnotifier").modal("hide");
    $scope.ednotifier = null;
    $scope.ednotifier_list = null;
    $scope.ednotifier_error = null };
  $scope.editnotifier = function(list, notifier) {
    var l = angular.copy(list);
    for (var i = 0; i < l.notify_list.length; i++) { delete l.notify_list[i].model;
      delete l.notify_list[i].shortdesc }
    List.save({ listid: encodeURIComponent(l.id) }, l, function(lst) { $scope.loadlists($scope.lists);
      $scope.cancel_editnotifier() }, function(err) { $scope.ednotifier_error = err.data.message }) }
}

function _MonCtrl($scope, $injector, $location, Job, History, Metrics, JobTypes, Regions, List, Plan) { "use strict";
  $injector.invoke(PortalCtrl, this, { $scope: $scope });
  $scope.uptime_percent = function(history) {
    if (!history || history.length < 2) {
      return 0 }
    var t = { up: 0, down: 0, other: 0 };
    var dt;
    for (var i = 0; i < history.length - 1; i++) { dt = history[i + 1].since - history[i].since;
      if (history[i].status == "up") { t.up += dt } else if (history[i].status == "down") { t.down += dt } else { t.other += dt } }
    if (t.up + t.down === 0) {
      return 0 }
    return 100 * t.up / (t.up + t.down) };
  $scope.parse_jobtypes = function(jtypes) { $scope.alljobtypes = jtypes;
    var keys = Object.keys(jtypes);
    for (var k = 0; k < keys.length; k++) {
      if (keys[k][0] == "$") { delete $scope.alljobtypes[keys[k]] } } };
  $scope.parse_regions = function(regions) { $scope.allregions = {};
    for (var i = 0; i < regions.length; i++) { $scope.allregions[regions[i].code] = regions[i] } };
  String.prototype.show_escape_chars = function() {
    return this.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t").replace(/\f/g, "\\f") };
  String.prototype.parse_escape_chars = function() {
    return this.replace(/\\n/g, "\n").replace(/\\r/g, "\r").replace(/\\t/g, " ").replace(/\\f/g, "\f") };
  $scope.set_config_defaults = function(job) { job.config = {};
    if (!job.job_type) {
      return }
    var keys = Object.keys($scope.alljobtypes[job.job_type].config);
    for (var i = 0; i < keys.length; i++) {
      if ($scope.alljobtypes[job.job_type].config[keys[i]].default) { job.config[keys[i]] = $scope.alljobtypes[job.job_type].config[keys[i]].default } } };
  $scope.click_region = function(r) {
    if ($scope.job_region_set[r]) { $scope.job_region_set[r] = false } else {
      var keys = Object.keys($scope.job_region_set);
      var on = 0;
      for (var i = 0; i < keys.length; i++) {
        if ($scope.job_region_set[keys[i]]) { on++ } }
      if (on < $scope.plan.monitoring.regions) { $scope.job_region_set[r] = true } } };
  $scope.select_opts = function(config, required) {
    var out = {};
    if (!config) {
      return out }
    var keys = Object.keys(config);
    for (var i = 0; i < keys.length; i++) {
      if (config[keys[i]].required == required) { out[keys[i]] = config[keys[i]] } }
    return out };
  $scope.make_new_rule = function(job) {
    var rkeys = Object.keys(job.model.results);
    var key = rkeys[0];
    return { key: key, comparison: job.model.results[key].comparators[0], value: null } };
  $scope.add_rule = function(job, rule) {
    var r = angular.copy(rule);
    job.rules.push(r) };
  $scope.init_editjob_modal = function() { $scope.origjob = angular.copy($scope.job);
    $scope.edit_error = null;
    $scope.job_region_set = {};
    for (var i = 0; i < $scope.job.regions.length; i++) { $scope.job_region_set[$scope.job.regions[i]] = true }
    $scope.show_adv_job = false;
    $scope.show_adv_type = false;
    $("#editjob").modal("show") };
  $scope.cancel_editjob = function(save) { $("#editjob").modal("hide");
    $scope.job_region_set = null;
    $scope.edit_error = null;
    if (!save) { $scope.job = $scope.origjob } } }

function MonitorListCtrl($scope, $injector, $location, Job, History, Metrics, JobTypes, Regions, List, Plan) { "use strict";
  $scope.curpage = 0;
  $scope.pagesize = 50;
  $scope.pageprev = function(full) {
    if ($scope.curpage <= 0) {
      return }
    if (full) { $scope.curpage = 0 } else { $scope.curpage = $scope.curpage - 1 } };
  $scope.pagenext = function(len, full) {
    var max = Math.ceil(len / $scope.pagesize) - 1;
    if ($scope.curpage >= max) {
      return }
    if (full) { $scope.curpage = max } else { $scope.curpage = $scope.curpage + 1 } };
  $injector.invoke(_MonCtrl, this, { $scope: $scope });
  var default_metrics = { ping: "rtt", tcp: "connect" };
  $scope.docreate = true;
  $scope.spin = { jobs: true, metrics: true, history: true };
  $scope.jobs_failure = false;
  $scope.metrics_failure = false;
  $scope.history_failure = false;
  $scope.merge_history = function() {
    if (!$scope.history && $scope.spin.history || !$scope.jobs) {
      return }
    for (var i = 0; i < $scope.jobs.length; i++) {
      var j = $scope.jobs[i];
      var history = [];
      if ($scope.history) {
        for (var k = 0; k < $scope.history.length; k++) {
          if (j.id == $scope.history[k].job) { history.unshift($scope.history[k]) } } }
      j.history = history } };
  $scope.merge_metrics = function() {
    if (!$scope.metrics && $scope.spin.metrics || !$scope.jobs) {
      return }
    for (var i = 0; i < $scope.jobs.length; i++) {
      var j = $scope.jobs[i];
      var metrics = {};
      if ($scope.metrics) {
        for (var k = 0; k < $scope.metrics.length; k++) {
          if (j.id == $scope.metrics[k].jobid) { metrics = $scope.metrics[k].metrics } } }
      j.metrics = metrics;
      j.curmetric = null;
      if (Object.keys(j.metrics).length) {
        if (!j.curmetric) { j.curmetric = default_metrics[j.job_type] }
        if (!j.curmetric) { j.curmetric = Object.keys(j.metrics)[0] } } } };
  $scope.count_global_status = function(jobs, status) {
    if (!jobs) {
      return 0 }
    var n = 0;
    for (var i = 0; i < jobs.length; i++) {
      if (jobs[i].status.global.status == status) { n++ } }
    return n };
  var start_job_list_poller = function() { $injector.invoke(Poller, this, { $scope: $scope, $setup: { func: Job.query, scopevar: "jobs", frequency: { 15: 6e4, 21: 3e5, 33: 18e5 }, first_success: function() { $scope.spin.jobs = false;
          $scope.jobs_failure = false }, first_error: function() { $scope.spin.jobs = false;
          $scope.jobs_failure = true }, success: function() { $scope.merge_history();
          $scope.merge_metrics() } } }) };
  var start_job_history_poller = function() { $injector.invoke(Poller, this, { $scope: $scope, $setup: { func: History.query, input: { region: "global", period: "24h", exact: true }, scopevar: "history", frequency: { 12: 3e5, 36: 9e5 }, first_success: function() { $scope.spin.history = false;
          $scope.history_failure = false }, first_error: function() { $scope.spin.history = false;
          $scope.history_failure = true }, success: $scope.merge_history } }) };
  var start_job_metrics_poller = function() { $injector.invoke(Poller, this, { $scope: $scope, $setup: { func: Metrics.query, input: { period: "24h" }, scopevar: "metrics", frequency: { 12: 3e5, 36: 9e5 }, first_success: function() { $scope.spin.metrics = false;
          $scope.metrics_failure = false }, first_error: function() { $scope.spin.metrics = false;
          $scope.metrics_failure = true }, success: $scope.merge_metrics } }) };
  var load_error = function(err) { $scope.spin.jobs = false;
    $scope.spin.history = false;
    $scope.spin.metrics = false;
    $scope.jobs_failure = true };
  var load_plan = function() { $scope.plan = Plan.get({}, function() { start_job_list_poller();
      start_job_history_poller();
      start_job_metrics_poller() }, load_error) };
  var load_notify_lists = function() { $scope.allnotifylists = List.query({}, function() { load_plan() }, load_error) };
  var load_regions = function() { Regions.query({}, function(regions) { $scope.parse_regions(regions);
      load_notify_lists() }, load_error) };
  var load_jobtypes = function() { JobTypes.get({}, function(jtypes) { $scope.parse_jobtypes(jtypes);
      load_regions() }, load_error) };
  load_jobtypes();
  $scope.clickjob = function(job) { $location.path("/monitoring/jobs/" + encodeURIComponent(job.id)) };
  $scope.confirm_deletejob = function(job, idx) { $scope.deljob = job;
    $scope.deljob_idx = idx;
    $scope.del_error = null;
    $("#confirmdelete").modal("show") };
  $scope.cancel_deletejob = function() { $("#confirmdelete").modal("hide");
    $scope.deljob = null;
    $scope.deljob_idx = null;
    $scope.del_error = null };
  $scope.deletejob = function(job, idx) { Job.remove({ jobid: encodeURIComponent(job.id) }, function() { $scope.cancel_deletejob();
      $scope.jobs.splice(idx, 1) }, function(err) { $scope.del_error = err.data.message }) };
  $scope.show_createjob = function() { $scope.job = { region_scope: "fixed", frequency: 300, rapid_recheck: false, policy: "quorum", notify_delay: 0, notify_repeat: 0, notify_failback: true, notify_regional: false, rules: [], regions: [] };
    $scope.init_editjob_modal() };
  $scope.createjob = function(job) { $scope.spin.jobcreate = true;
    job.regions = [];
    var rkeys = Object.keys($scope.job_region_set);
    for (var k = 0; k < rkeys.length; k++) {
      if ($scope.job_region_set[rkeys[k]]) { job.regions.push(rkeys[k]) } }
    var ckeys = Object.keys(job.config);
    for (var i = 0; i < ckeys.length; i++) {
      if (job.model.config[ckeys[i]].type == "string") { job.config[ckeys[i]] = job.config[ckeys[i]].parse_escape_chars() } }
    delete job.model;
    Job.create({}, job, function() { $scope.spin.jobs = true;
      $scope.jobs_failure = false;
      $scope.jobs = Job.query({}, function() { $scope.spin.jobcreate = false;
        $scope.spin.jobs = false;
        $scope.jobs_failure = false;
        $scope.merge_history();
        $scope.merge_metrics();
        $scope.cancel_editjob(true) }, function(err) { $scope.spin.jobcreate = false;
        $scope.spin.jobs = false;
        $scope.jobs_failure = true;
        $scope.cancel_editjob() }) }, function(err) { $scope.edit_error = err.data.message }) } }

function MonitorCtrl($scope, $injector, $routeParams, Job, History, Metrics, JobTypes, Regions, List, Plan) { "use strict";
  $injector.invoke(_MonCtrl, this, { $scope: $scope });
  $scope.spin = { job: true, metrics: true, history: true, history_log: true, jobedit: false };
  $scope.jobs_failure = false;
  $scope.metrics_failure = false;
  $scope.history_failure = false;
  $scope.history_log_failure = false;
  $scope.doedit = true;
  $scope.jobid = $routeParams.jobid;
  $scope.period = "24h";
  $scope.statusfilter = null;
  $scope.newest_log = 0;
  var parse_history = function(H) {
    var history = {};
    for (var i = 0; i < H.length; i++) {
      if (!history[H[i].region]) { history[H[i].region] = [] }
      history[H[i].region].unshift(H[i]) }
    $scope.history = history };
  var parse_metrics = function(M) {
    var metrics = {};
    for (var i = 0; i < M.length; i++) { metrics[M[i].region] = M[i].metrics }
    $scope.metrics = metrics };
  $scope.reload_stats = function() { History.query({ jobid: $scope.jobid, period: $scope.period, exact: true }, parse_history, load_error);
    Metrics.query({ period: $scope.period, jobid: $scope.jobid }, parse_metrics, load_error) };
  $scope.set_status_filter = function(region) { $scope.statusfilter = region;
    $scope.reload_history_log(null, null) };
  $scope.reload_history_log = function(start, end) { $scope.spin.history_log = true;
    $scope.history_log_failure = false;
    var filter = { jobid: $scope.jobid };
    if (start) { filter.start = start }
    if (end) { filter.end = end }
    if ($scope.statusfilter) { filter.region = $scope.statusfilter }
    $scope.history_log = History.query(filter, function() { $scope.spin.history_log = false;
      $scope.history_log_failure = false;
      if (!start && !end && $scope.history_log.length) { $scope.newest_log = $scope.history_log[0].since } }, function(err) { $scope.spin.history_log = false;
      $scope.history_log_failure = true }) };
  $scope.history_log_has_older = function() {
    return $scope.history_log && $scope.history_log.length >= 20 };
  $scope.history_log_has_newer = function() {
    return $scope.history_log && $scope.history_log.length && $scope.newest_log > $scope.history_log[0].since };
  $scope.history_log_older = function() {
    if ($scope.history_log_has_older()) {
      var last = $scope.history_log[$scope.history_log.length - 1].since;
      $scope.reload_history_log(null, last) } };
  $scope.history_log_newer = function() {
    if ($scope.history_log_has_newer()) { $scope.reload_history_log($scope.history_log[0].since, null) } };
  $scope.set_active = function(job, active) {
    var prev = job.active;
    job.active = active;
    Job.save({ jobid: $scope.jobid }, { active: active }, function() {}, function(err) { job.active = prev;
      $scope.errors = [err.data.message] }) };
  var start_job_poller = function() { $injector.invoke(Poller, this, { $scope: $scope, $setup: { func: Job.get, input: { jobid: $scope.jobid }, scopevar: "job", frequency: { 15: 6e4, 21: 3e5, 33: 18e5 }, first_success: function() { $scope.spin.job = false;
          $scope.job_failure = false }, first_error: function() { $scope.spin.job = false;
          $scope.job_failure = true }, pause_while: function() {
          return $("#editjob").hasClass("in") }, success: function() { $scope.job.model = $scope.alljobtypes[$scope.job.job_type];
          var ckeys = Object.keys($scope.job.config);
          for (var i = 0; i < ckeys.length; i++) {
            if ($scope.job.model.config[ckeys[i]].type == "string") { $scope.job.config[ckeys[i]] = $scope.job.config[ckeys[i]].show_escape_chars() } }
          $scope.sorted_regions = ["global"];
          var reg = angular.copy($scope.job.regions);
          var idxg = reg.indexOf("global");
          if (idxg >= 0) { reg.splice(idxg, 1) }
          reg.sort();
          $scope.sorted_regions.push.apply($scope.sorted_regions, reg) } } }) };
  var start_job_history_poller = function() { $injector.invoke(Poller, this, { $scope: $scope, $setup: { func: History.query, update: function(setup) { setup.input.period = $scope.period }, input: { period: $scope.period, exact: true, jobid: $scope.jobid }, scopevar: "history_raw", frequency: { 12: 3e5, 36: 9e5 }, first_success: function() { $scope.spin.history = false;
          $scope.history_failure = false }, first_error: function() { $scope.spin.history = false;
          $scope.history_failure = true }, success: parse_history } }) };
  var start_job_metrics_poller = function() { $injector.invoke(Poller, this, { $scope: $scope, $setup: { func: Metrics.query, update: function(setup) { setup.input.period = $scope.period }, input: { period: $scope.period, jobid: $scope.jobid }, scopevar: "metrics_raw", frequency: { 12: 3e5, 36: 9e5 }, first_success: function() { $scope.spin.metrics = false;
          $scope.metrics_failure = false }, first_error: function() { $scope.spin.metrics = false;
          $scope.metrics_failure = true }, success: parse_metrics } }) };
  var load_error = function(err) { $scope.job = null;
    $scope.spin.job = false;
    $scope.spin.metrics = false;
    $scope.spin.history = false;
    $scope.spin.history_log = false;
    $scope.job_failure = true };
  var load_regions = function() { Regions.query({}, function(regions) { $scope.parse_regions(regions);
      $scope.allregions.global = { name: "GLOBAL", code: "global", subnets: null };
      start_job_poller();
      start_job_metrics_poller();
      start_job_history_poller();
      $scope.reload_history_log(null, null) }, load_error) };
  var load_notify_lists = function() { List.query({}, function(lists) { $scope.allnotifylists = lists;
      $scope.notifylists_byid = {};
      for (var i = 0; i < lists.length; i++) { $scope.notifylists_byid[lists[i].id] = lists[i] }
      load_regions() }, load_error) };
  var load_plan = function() { $scope.plan = Plan.get({}, function() { load_notify_lists() }, load_error) };
  var load_jobtypes = function() { JobTypes.get({}, function(jtypes) { $scope.parse_jobtypes(jtypes);
      load_plan() }, load_error) };
  $scope.get_metrics = function() {
    if (!$scope.job || !$scope.job.model) {
      return [] }
    var metrics = [];
    var mkeys = Object.keys($scope.job.model.results);
    for (var i = 0; i < mkeys.length; i++) {
      if ($scope.job.model.results[mkeys[i]].metric) { metrics.push(mkeys[i]) } }
    return metrics };
  load_jobtypes();
  $scope.show_editjob = function() { $scope.init_editjob_modal() };
  $scope.editjob = function(job) { $scope.spin.jobedit = true;
    job.regions = [];
    var rkeys = Object.keys($scope.job_region_set);
    for (var k = 0; k < rkeys.length; k++) {
      if ($scope.job_region_set[rkeys[k]]) { job.regions.push(rkeys[k]) } }
    var j = angular.copy(job);
    var ckeys = Object.keys(j.config);
    for (var i = 0; i < ckeys.length; i++) {
      if (j.model.config[ckeys[i]].type == "string") {
        if (j.config[ckeys[i]]) { j.config[ckeys[i]] = j.config[ckeys[i]].parse_escape_chars() } else { delete j.config[ckeys[i]] } } }
    delete j.model;
    Job.save({ jobid: $scope.jobid }, j, function() { $scope.cancel_editjob(true);
      $scope.spin.jobedit = false }, function(err) { $scope.edit_error = err.data.message;
      $scope.spin.jobedit = false }) } }

function PulsarCtrl($scope, $injector, PulsarApps, PulsarJobs, PulsarJobStatsLive) { "use strict";
  $injector.invoke(PortalCtrl, this, { $scope: $scope });
  $scope.spin = { apps: true, map: false };
  $scope.apps_failure = false;
  $scope.map_failure = false;
  $scope.map_data = {};
  $scope.map_view = "world";
  $scope.has_mappable_jobs = function(app) {
    if (app === undefined || app.jobs === undefined) {
      return false }
    for (var i = 0; i < app.jobs.length; i++) {
      if (app.jobs[i].typeid == "custom" || app.jobs[i].typeid == "latency") {
        return true } }
    return false };
  $scope.has_job_type = function(app, typeid) {
    if (app === undefined || app.jobs === undefined) {
      return false }
    for (var i = 0; i < app.jobs.length; i++) {
      if (app.jobs[i].typeid == typeid) {
        return true } }
    return false };
  $scope.has_scheduled_jobs = function(app) {
    if (app === undefined || app.jobs === undefined) {
      return false }
    for (var i = 0; i < app.jobs.length; i++) {
      if (app.jobs[i].typeid != "custom") {
        return true } }
    return false };
  PulsarApps.query({}, function(apps) { $scope.apps = apps;
    $scope.spin.apps = false;
    var jobsok = function(n) {
      return function(jobs) { $scope.apps[n].jobs = jobs;
        $scope.apps[n].spin_jobs = false } };
    var jobserr = function(n) {
      return function() { $scope.apps[n].spin_jobs = false;
        $scope.apps[n].jobs_failure = true } };
    for (var i = 0; i < $scope.apps.length; i++) { $scope.apps[i].jobs = [];
      $scope.apps[i].spin_jobs = true;
      $scope.apps[i].jobs_failure = false;
      PulsarJobs.query({ appid: $scope.apps[i].appid }, jobsok(i), jobserr(i)) } }, function() { $scope.spin.apps = false;
    $scope.apps_failure = true });
  $scope.show_pulsartag = function(app) { $scope.tagapp = app;
    $("#pulsartag").modal("show") };
  $scope.cancel_pulsartag = function() { $("#pulsartag").modal("hide");
    $scope.tagapp = null };
  var isomap = { AF: "AFG", AX: "ALA", AL: "ALB", DZ: "DZA", AS: "ASM", AD: "AND", AO: "AGO", AI: "AIA", AQ: "ATA", AG: "ATG", AR: "ARG", AM: "ARM", AW: "ABW", AU: "AUS", AT: "AUT", AZ: "AZE", BS: "BHS", BH: "BHR", BD: "BGD", BB: "BRB", BY: "BLR", BE: "BEL", BZ: "BLZ", BJ: "BEN", BM: "BMU", BT: "BTN", BO: "BOL", BA: "BIH", BW: "BWA", BV: "BVT", BR: "BRA", VG: "VGB", IO: "IOT", BN: "BRN", BG: "BGR", BF: "BFA", BI: "BDI", KH: "KHM", CM: "CMR", CA: "CAN", CV: "CPV", KY: "CYM", CF: "CAF", TD: "TCD", CL: "CHL", CN: "CHN", HK: "HKG", MO: "MAC", CX: "CXR", CC: "CCK", CO: "COL", KM: "COM", CG: "COG", CD: "COD", CK: "COK", CR: "CRI", CI: "CIV", HR: "HRV", CU: "CUB", CY: "CYP", CZ: "CZE", DK: "DNK", DJ: "DJI", DM: "DMA", DO: "DOM", EC: "ECU", EG: "EGY", SV: "SLV", GQ: "GNQ", ER: "ERI", EE: "EST", ET: "ETH", FK: "FLK", FO: "FRO", FJ: "FJI", FI: "FIN", FR: "FRA", GF: "GUF", PF: "PYF", TF: "ATF", GA: "GAB", GM: "GMB", GE: "GEO", DE: "DEU", GH: "GHA", GI: "GIB", GR: "GRC", GL: "GRL", GD: "GRD", GP: "GLP", GU: "GUM", GT: "GTM", GG: "GGY", GN: "GIN", GW: "GNB", GY: "GUY", HT: "HTI", HM: "HMD", VA: "VAT", HN: "HND", HU: "HUN", IS: "ISL", IN: "IND", ID: "IDN", IR: "IRN", IQ: "IRQ", IE: "IRL", IM: "IMN", IL: "ISR", IT: "ITA", JM: "JAM", JP: "JPN", JE: "JEY", JO: "JOR", KZ: "KAZ", KE: "KEN", KI: "KIR", KP: "PRK", KR: "KOR", KW: "KWT", KG: "KGZ", LA: "LAO", LV: "LVA", LB: "LBN", LS: "LSO", LR: "LBR", LY: "LBY", LI: "LIE", LT: "LTU", LU: "LUX", MK: "MKD", MG: "MDG", MW: "MWI", MY: "MYS", MV: "MDV", ML: "MLI", MT: "MLT", MH: "MHL", MQ: "MTQ", MR: "MRT", MU: "MUS", YT: "MYT", MX: "MEX", FM: "FSM", MD: "MDA", MC: "MCO", MN: "MNG", ME: "MNE", MS: "MSR", MA: "MAR", MZ: "MOZ", MM: "MMR", NA: "NAM", NR: "NRU", NP: "NPL", NL: "NLD", AN: "ANT", NC: "NCL", NZ: "NZL", NI: "NIC", NE: "NER", NG: "NGA", NU: "NIU", NF: "NFK", MP: "MNP", NO: "NOR", OM: "OMN", PK: "PAK", PW: "PLW", PS: "PSE", PA: "PAN", PG: "PNG", PY: "PRY", PE: "PER", PH: "PHL", PN: "PCN", PL: "POL", PT: "PRT", PR: "PRI", QA: "QAT", RE: "REU", RO: "ROU", RU: "RUS", RW: "RWA", BL: "BLM", SH: "SHN", KN: "KNA", LC: "LCA", MF: "MAF", PM: "SPM", VC: "VCT", WS: "WSM", SM: "SMR", ST: "STP", SA: "SAU", SN: "SEN", RS: "SRB", SC: "SYC", SL: "SLE", SG: "SGP", SK: "SVK", SI: "SVN", SB: "SLB", SO: "SOM", ZA: "ZAF", GS: "SGS", SS: "SSD", ES: "ESP", LK: "LKA", SD: "SDN", SR: "SUR", SJ: "SJM", SZ: "SWZ", SE: "SWE", CH: "CHE", SY: "SYR", TW: "TWN", TJ: "TJK", TZ: "TZA", TH: "THA", TL: "TLS", TG: "TGO", TK: "TKL", TO: "TON", TT: "TTO", TN: "TUN", TR: "TUR", TM: "TKM", TC: "TCA", TV: "TUV", UG: "UGA", UA: "UKR", AE: "ARE", GB: "GBR", US: "USA", UM: "UMI", UY: "URY", UZ: "UZB", VU: "VUT", VE: "VEN", VN: "VNM", VI: "VIR", WF: "WLF", EH: "ESH", YE: "YEM", ZM: "ZMB", ZW: "ZWE" };
  var risomap = {};
  $.each(isomap, function(k, v) { risomap[v] = k });
  var map_csteps = 6;
  var map_colors = ["#1a9850", "#91cf60", "#d9ef8b", "#fee08b", "#fc8d59", "#d73027"];
  $scope.make_map = function(view) { $("#pulsar-map").empty();
    var map = new Datamap({ element: document.getElementById("pulsar-map"), scope: view, responsive: true, geographyConfig: { highlightFillColor: "#3a87ad", highlightBorderWidth: 0, popupTemplate: function(geo, data) {
          var gkey = geo.id;
          if ($scope.map_view == "world") { gkey = risomap[gkey] } else if ($scope.map_view == "usa") { gkey = "US:" + gkey }
          var out = '<div class="hoverinfo"><span class="pulsar-geopopup-name">' + geo.properties.name + "</span><br>";
          if ($scope.map_data[gkey]) { out += "<strong>Average RTT: </strong> " + $scope.map_data[gkey].value + " ms</div>" } else { out += "<i>Insufficient data</i>" }
          return out } }, fills: { defaultFill: "#eeeeee" } });
    window.addEventListener("resize", function() { map.resize() });
    return map };
  $scope.map = $scope.make_map("world");
  $scope.change_map_view = function(view) { $scope.map_view = view;
    $scope.map = $scope.make_map(view);
    $scope.map.resize();
    $scope.set_map_data($scope.map_data) };
  $scope.set_map_data = function(data) {
    var maptypes = ["world", "usa"];
    $.each($scope.map_data, function(k, v) {
      if (!(k in data)) { data[k] = null } });
    $scope.map_data = data;
    $.each(maptypes, function(idx, mapmode) {
      var chor = {};
      var max = 0,
        min = 1e8;
      $.each(data, function(k, v) {
        if (v === null) {
          return true }
        if (mapmode == "world") {
          if (!isomap[k]) {
            return true } } else if (mapmode == "usa") {
          if (!k.startsWith("US:")) {
            return true } }
        if (v.value < min) { min = v.value }
        if (v.value > max) { max = v.value } });
      var delta = (max - min) / (map_csteps + 1);
      var color = d3.scale.linear().domain(d3.range(map_csteps).map(function(i) {
        return min + i * delta })).range(map_colors);
      $.each(data, function(k, v) {
        if (mapmode == "world") {
          if (!isomap[k]) {
            return true }
          if (v === null) { chor[isomap[k]] = "#eeeeee" } else { chor[isomap[k]] = color(v.value) } } else if (mapmode == "usa") {
          if (!k.startsWith("US:")) {
            return true }
          var state = k.split(":")[1];
          if (v === null) { chor[state] = "#eeeeee" } else { chor[state] = color(v.value) } } });
      $scope.map.updateChoropleth(chor) }) };
  $scope.load_map = function(app, job) { $scope.set_map_data({});
    $scope.map_failure = false;
    $scope.map_data = {};
    if (!app || !job) { $scope.spin.map = false;
      return }
    $scope.spin.map = true;
    PulsarJobStatsLive.get({ appid: app.appid, jobid: job.jobid }, function(data) { $scope.set_map_data(data);
      $scope.spin.map = false }, function() { $scope.map_data = {};
      $scope.map_failure = true;
      $scope.spin.map = false }) };
  $scope.filter_map_jobs = function(job) {
    return job.typeid === "custom" || job.typeid === "latency" } }! function loadFileAPI() {
  if (typeof FormData === "undefined") {
    var script = document.createElement("script");
    script.setAttribute("src", "/js/FileAPI.min.js");
    document.getElementsByTagName("head")[0].appendChild(script) } }();
angular.module("portal.directives", ["portal.services"]).directive("eatClick", function() {
  return function(scope, element, attrs) { $(element).click(function(event) { event.preventDefault();
      event.stopPropagation() }) } }).directive("nullIfEmpty", function() {
  return { require: "ngModel", link: function(scope, elm, attr, ctrl) { ctrl.$parsers.unshift(function(value) {
        return value === "" ? null : value }) } } }).directive("ccNumber", function() {
  return { require: "ngModel", link: function(scope, elm, attr, ctrl) { ctrl.$parsers.unshift(function(value) {
        if ($.payment.validateCardNumber(value)) { ctrl.$setValidity("ccnumber", true);
          return value } else { ctrl.$setValidity("ccnumber", false);
          return undefined } }) } } }).directive("ccExp", function() {
  return { require: "ngModel", link: function(scope, elm, attr, ctrl) { ctrl.$parsers.unshift(function(value) {
        var e = $.payment.cardExpiryVal(value);
        if ($.payment.validateCardExpiry(e.month, e.year)) { ctrl.$setValidity("ccexp", true);
          return value } else { ctrl.$setValidity("ccexp", false);
          return undefined } }) } } }).directive("ccCvc", function() {
  return { require: "ngModel", link: function(scope, elm, attr, ctrl) { ctrl.$parsers.unshift(function(value) {
        if ($.payment.validateCardCVC(value)) { ctrl.$setValidity("cccvc", true);
          return value } else { ctrl.$setValidity("cccvc", false);
          return undefined } }) } } }).directive("horizonChart", function() {
  var plain = ["#000", "#000", "#000", "#ffffd4", "#fed98e", "#fe9929", "#cc4c02"];
  var hover = ["#000", "#000", "#000", "#ffffe9", "#feebc6", "#fecb93", "#e5a580"];
  return { restrict: "E", scope: { data: "=", hover: "=" }, link: function(scope, element, attrs) {
      var width = element[0].clientWidth,
        height = element[0].clientHeight;
      var chart = d3.horizon().width(width).height(height).bands(4).mode("offset").interpolate("basis").colors(plain);
      var svg = d3.select(element[0]).append("svg").attr("width", width).attr("height", height);
      scope.$watch("hover", function(newh, oldh) {
        if (newh) { chart.colors(hover);
          svg.call(chart) } else { chart.colors(plain);
          svg.call(chart) } });
      scope.$watch("data", function(d, oldd) { svg.selectAll("*").remove();
        if (!d) {
          return }
        svg.data([d]).call(chart) }) } } }).directive("uptimeChart", function() {
  var colors = { up: "#66ee66", down: "#ee6666", pending: "#cccccc", unknown: "#cccccc" };
  return { restrict: "E", scope: { data: "=", hover: "=" }, link: function(scope, element, attrs) {
      var width = element[0].clientWidth,
        height = element[0].clientHeight;
      var svg = d3.select(element[0]).append("svg").attr("width", width).attr("height", height).append("g");
      scope.$watch("data", function(data, oldd) { svg.selectAll("rect").remove();
        if (!data) {
          return }
        var dshort = data.slice(0, data.length - 1);
        var start = data[0].since;
        var end = data[data.length - 1].since;
        var uptime = svg.selectAll(".upbands").data(dshort).enter().append("rect").attr("x", function(d) {
          return width * (d.since - start) / (end - start) }).attr("y", 0).attr("width", function(d, i) {
          return width * (data[i + 1].since - d.since) / (end - start) }).attr("height", height).style("fill", function(d) {
          return colors[d.status] }) }) } } }).directive("ngFileSelect", ["$parse", "$http", function($parse, $http) {
  if ($http.uploadFile === undefined) { $http.uploadFile = function(config) {
      if (typeof FormData === "undefined") {
        var params = { url: config.url, data: config.data, complete: function(err, xhr) {
            var JSON_START = /^\s*(\[|\{[^\{])/,
              JSON_END = /[\}\]]\s*$/,
              PROTECTION_PREFIX = /^\)\]\}',?\n/;
            var data = xhr.responseText;
            if (typeof data == "string") { data = data.replace(PROTECTION_PREFIX, "");
              if (JSON_START.test(data) && JSON_END.test(data)) data = typeof data == "string" ? JSON.parse(data) : data }
            if (params.promiseThen != null) params.promiseThen(data, xhr.status, null, config);
            if (params.promiseError != null) params.promiseError(data, xhr.status, null, config);
            if (params.promiseSuccess != null) params.promiseSuccess(data, xhr.status, null, config) } };
        if (config.file != null) { params.files = { file: config.file } }
        if ("headers" in config) { params.headers = config.headers }
        var xhr = FileAPI.upload(params);
        return { then: function(func) { params.promiseThen = func }, success: function(func) { params.promiseSuccess = func }, error: function(func) { params.promiseError = func } } } else {
        var headers = { "Content-Type": false };
        if ("headers" in config) { $.extend(headers, config.headers) }
        return $http({ method: "PUT", url: config.url, headers: headers, transformRequest: function(data) {
            var formData = new FormData;
            formData.append(config.name, config.file);
            for (var key in config.data) { formData.append(key, config.data[key]) }
            return formData } }) } } }
  return function(scope, elem, attr) {
    if (typeof FormData === "undefined") { elem.wrap('<div class="js-fileapi-wrapper" style="position:relative; overflow:hidden">') }
    var fn = $parse(attr.ngFileSelect);
    elem.bind("change", function(evt) {
      var files = [];
      if (typeof FormData !== "undefined") {
        var fileList = evt.target.files;
        for (var i = 0; i < fileList.length; i++) { files.push(fileList.item(i)) } } else { files = FileAPI.getFiles(evt) }
      scope.$apply(function() { fn(scope, { $files: files, $event: evt }) }) }) } }]).directive("zoneRecordSearch", ["$parse", "$location", "ZoneRecordSearch", function($parse, $location, ZoneRecordSearch) { "use strict";
  return { restrict: "A", require: "?ngModel", link: function(scope, element, attrs, controller) {
      var getter = $parse(attrs.zoneRecordSearch),
        setter = getter.assign,
        value = getter(scope);
      scope.$watch(attrs.zoneRecordSearch, function(newValue, oldValue) {
        if (newValue !== oldValue) { value = newValue } });
      var timeout;
      element.typeahead({ source: function(query, process) {
          if (timeout) { clearTimeout(timeout) }
          timeout = setTimeout(function() {
            var type = attrs.zoneRecordSearch;
            ZoneRecordSearch.query({ q: query, type: type }, function(result) { process(result) }) }, 500) }, minLength: attrs.minLength || 1, items: attrs.items, updater: function(item) {
          var type = attrs.zoneRecordSearch;
          item = JSON.parse(item);
          if (type == "zone") { scope.zones[item.zone] = true;
            scope.nozones = false } else if (type == "record") {
            var found = false;
            for (var i = 0; i < scope.records.length; i++) {
              if (scope.records[i].domain == item.domain && scope.records[i].type == item.type) { found = true;
                break } }
            if (!found) { scope.records.push(item);
              scope.norecords = false } } else {
            if (item.domain && item.type) { $location.path("/zones/" + encodeURIComponent(item.zone) + "/" + encodeURIComponent(item.domain) + "/" + item.type) } else $location.path("/zones/" + encodeURIComponent(item.zone)) }
          scope.$apply();
          return "" }, highlighter: function(item) {
          var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
          item = JSON.parse(item);
          if (item.domain && item.type) {
            return '<span class="badge">' + item.type + "</span> " + item.domain.replace(new RegExp("(" + query + ")", "ig"), function($1, match) {
              return "<strong>" + match + "</strong>" }) } else {
            return '<i class="icon-tasks"></i> ' + item.zone.replace(new RegExp("(" + query + ")", "ig"), function($1, match) {
              return "<strong>" + match + "</strong>" }) } }, matcher: function(item) {
          var key = item.domain && item.type ? item.domain : item.zone;
          return ~key.toLowerCase().indexOf(this.query.toLowerCase()) }, sorter: function(items) {
          var beginswith = [],
            caseSensitive = [],
            caseInsensitive = [],
            item, key;
          while (item = items.shift()) { key = item.domain && item.type ? item.domain : item.zone;
            if (!key.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(JSON.stringify(item));
            else if (~key.indexOf(this.query)) caseSensitive.push(JSON.stringify(item));
            else caseInsensitive.push(JSON.stringify(item)) }
          return beginswith.concat(caseSensitive, caseInsensitive) } }) } } }]).directive("userKeySearch", ["$parse", function($parse) { "use strict";
  return { restrict: "A", require: "?ngModel", link: function postLink(scope, element, attrs, controller) {
      var getter = $parse(attrs.userKeySearch),
        setter = getter.assign,
        value = getter(scope);
      scope.$watch(attrs.userKeySearch, function(newValue, oldValue) {
        if (newValue !== oldValue) { value = newValue } });
      element.attr("data-provide", "typeahead");
      element.typeahead({ source: function(query, process) {
          var out = [],
            item;
          for (var i = 0; i < scope.users.length; i++) { item = { type: "user", data: scope.users[i] };
            if (this.matcher(item)) { out.push(item) } }
          for (i = 0; i < scope.apikeys.length; i++) { item = { type: "apikey", data: scope.apikeys[i] };
            if (this.matcher(item)) { out.push(item) } }
          process(out) }, minLength: attrs.minLength || 1, items: attrs.items, updater: function(item) { item = JSON.parse(item);
          if (item.type == "user") { scope.add_user_to_team(item.data, scope.team) } else { scope.add_apikey_to_team(item.data, scope.team) }
          scope.$apply();
          return "" }, highlighter: function(item) { item = JSON.parse(item);
          var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
          var out = "";
          var userstr = item.data.name;
          if (item.type == "user") { userstr += " (" + item.data.username + ")";
            out += '<i class="icon-user"></i> ' } else { out += '<i class="icon-key"></i> ' }
          out += userstr.replace(new RegExp("(" + query + ")", "ig"), function($1, match) {
            return "<strong>" + match + "</strong>" });
          return out }, matcher: function(item) {
          var q = this.query.toLowerCase();
          var regex = /(<([^>]+)>)/;
          if (item.data.name.match(regex) || item.data.username && item.data.username.match(regex)) {
            return false }
          return item.data.name.toLowerCase().indexOf(q) != -1 || item.data.username !== undefined && item.data.username.toLowerCase().indexOf(q) != -1 }, sorter: function(items) {
          var beginswith = [],
            other = [],
            item, q = this.query.toLowerCase();
          while (item = items.shift()) {
            if (!item.data.name.toLowerCase().indexOf(q)) beginswith.push(JSON.stringify(item));
            else if (item.data.username !== undefined && !item.data.username.toLowerCase().indexOf(q)) beginswith.push(JSON.stringify(item));
            else other.push(JSON.stringify(item)) }
          return beginswith.concat(other) } });
      var typeahead = element.data("typeahead");
      typeahead.lookup = function(ev) {
        var items;
        this.query = this.$element.val() || "";
        if (this.query.length < this.options.minLength) {
          return this.shown ? this.hide() : this }
        items = $.isFunction(this.source) ? this.source(this.query, $.proxy(this.process, this)) : this.source;
        return items ? this.process(items) : this };
      if (attrs.minLength === "0") { setTimeout(function() { element.on("focus", function() { setTimeout(element.typeahead.bind(element, "lookup"), 200) }) }) } } } }]).directive("tooltipper", function() {
  return { link: function(scope, element, attrs) { $(function() { $(element).data("tooltip", false).tooltip({}) }) } } });
angular.module("portal.filters", []).filter("shortnum", ["$locale", "$filter", function($locale, $filter, decimals) { "use strict";
  return function(n, decimals) {
    var sz = "";
    if (n >= 1e12) { n = n / 1e12;
      sz = "T" } else if (n >= 1e9) { n = n / 1e9;
      sz = "B" } else if (n >= 1e6) { n = n / 1e6;
      sz = "M" } else if (n >= 1e3) { n = n / 1e3;
      sz = "k" } else {
      if (Math.floor(n) >= n - 1e-5) { decimals = 0 } }
    if (decimals === null) { decimals = 2 }
    return $filter("number")(n, decimals) + sz } }])
.filter("answerlist", ["$filter", function($filter, n) {
  "use strict";
  return function(answers, n) {
    var shortlist = answers;
    if (n) { shortlist = $filter("limitTo")(answers, n) }
    var out = shortlist.join(", ");
    if (shortlist.length < answers.length) {
      out += ", ..."
    }
    return out
  }
}]).filter("truncate", [function(n) { "use strict";
  return function(str, n) {
    if (str && typeof str === "string" && str.length > n) return str.substring(0, n - 3) + "...";
    return str } }]).filter("joindomain", [function(zone) { "use strict";
  return function(str, zone) {
    if (str) {
      if (str.slice(-1) == ".") {
        return str + zone } else {
        return str + "." + zone } } else {
      return zone } } }]).filter("mergearray", [function(sep) { "use strict";
  return function(arr) {
    if (!arr) return null;
    if (sep == null) sep = " ";
    return arr.join(sep) } }]).filter("hide", [function() { "use strict";
  return function(str) {
    return new Array(str.length + 1).join("*") } }]).filter("min", [function(n) { "use strict";
  return function(x, n) {
    return Math.min(x, n) } }]).filter("inteam", [function() { "use strict";
  return function(input, teamid) {
    var user_in_team = function(user) {
      if (user.teams === undefined) {
        return false }
      if (user.teams.filter(function(x) {
          return x == teamid }).length) {
        return true }
      return false };
    return input.filter(user_in_team) } }]).filter("startfrom", [function() { "use strict";
  return function(input, start) { start = +start;
    return input === undefined ? [] : input.slice(start) } }]).filter("unwrap_feedptr", [function() { "use strict";
  return function(n, key, feedmap, sourcemap, pulsar_jobs) { pulsar_jobs = typeof pulsar_jobs !== undefined ? pulsar_jobs : {};
    var format = function(key, val) {
      var arrkeys = ["georegion", "country", "us_state", "ca_province", "ip_prefixes", "asn"];
      if (key == "up") {
        if (val === true) {
          return '<i class="text-success icon-large icon-chevron-sign-up"/>' } else {
          return '<i class="text-error icon-large icon-chevron-sign-down"/>' } } else if (arrkeys.indexOf(key) != -1) {
        return "<span>" + val.join(", ").toString().substring(0, 25) + "</span>" } else if (key == "note") {
        return "<span>" + val.substring(0, 25) + "</span>" } else if (key == "pulse" || key == "pulsar") {
        var out = "";
        var job = null;
        if (pulsar_jobs !== undefined) { job = pulsar_jobs[val[0]] }
        if (!job) { out += "<i>JOBID: " + val[0] + "</i>" } else {
          var ell = job.name.length > 25 ? "..." : "";
          out += "<i>" + job.name.substring(0, 25) + ell + "</i>" }
        if ($.inArray("geo", val[1]) >= 0) { out += ' <span data-toggle="tooltip" title="GEO Aggregation"><i class="icon-large text-info icon-globe"></i></span>' }
        if ($.inArray("geo_asn", val[1]) >= 0) { out += ' <span data-toggle="tooltip" title="GEO+ASN Aggregation"><i class="icon-large text-info icon-plus-sign"></i></span>' }
        return out } else {
        return "<span>" + val + "</span>" } };
    if (typeof n === "object" && n !== undefined && n.feed !== undefined) {
      var feedid = n.feed;
      var srcid = feedmap[feedid].datasource;
      var value = feedid in feedmap && feedmap[feedid].data && key in feedmap[feedid].data ? feedmap[feedid].data[key] : ["<i>(unset)</i>"];
      return "<b>" + feedmap[feedid].name + "</b> via " + "<b>" + sourcemap[srcid].name + "</b>: " + format(key, value) } else {
      return format(key, n) } } }]).filter("ceil", [function() { "use strict";
  return function(n) {
    return Math.ceil(n) } }]);
angular.module("portal.services", ["ngResource", "ngCookies"]).factory("AnswerParser", function() {
  return { parse: function(type, answer) {
      switch (type) {
        case "AFSDB":
          return new Array(answer.subtype, answer.host);
        case "HINFO":
          return new Array(answer.hardware, answer.os);
        case "MX":
          return new Array(answer.priority, answer.host);
        case "NAPTR":
          return new Array(answer.order, answer.preference, answer.flags, answer.service, answer.regexp, answer.replacement);
        case "RP":
          return new Array(answer.email, answer.txt_dname);
        case "SRV":
          return new Array(answer.priority, answer.weight, answer.port, answer.host);
        default:
          return new Array(answer.value) } }, unparse: function(type, answer) {
      var a = answer.answer;
      switch (type) {
        case "AFSDB":
          return { subtype: a[0], host: a[1] };
        case "HINFO":
          return { hardware: a[0], os: a[1] };
        case "MX":
          return { priority: a[0], host: a[1] };
        case "NAPTR":
          return { order: a[0], preference: a[1], flags: a[2], service: a[3], regexp: a[4], replacement: a[5] };
        case "RP":
          return { email: a[0], txt_dname: a[1] };
        case "SRV":
          return { priority: a[0], weight: a[1], port: a[2], host: a[3] };
        default:
          return { value: a[0] } } } } }).factory("APIResource", function($resource, $cookieStore) {
  return function(url, params, methods) {
    var api_headers = { "X-NSONE-Key": $cookieStore.get("apikey") };
    var api_methods = { get: { method: "GET", headers: api_headers }, create: { method: "PUT", headers: api_headers }, save: { method: "POST", headers: api_headers }, query: { method: "GET", isArray: true, headers: api_headers }, remove: { method: "DELETE", headers: api_headers }, "delete": { method: "DELETE", headers: api_headers } };
    if (typeof methods !== "undefined") {
      for (var m in methods) {
        if ("headers" in methods[m]) { $.extend(methods[m].headers, api_headers) } else { methods[m].headers = api_headers } }
      $.extend(true, api_methods, methods) }
    if (typeof params === "undefined") { params = {} }
    return $resource(url, params, api_methods) } }).factory("Login", function($resource) {
  return $resource("/v1/account/login", {}, { check: { method: "POST" } }) }).factory("QPS", function(APIResource) {
  return APIResource("/v1/stats/qps/:zone/:domain/:type") }).factory("DashboardUsage", function(APIResource) {
  return APIResource("/v1/stats/usage", { by_tier: true, aggregate: true }) }).factory("ZoneListUsage", function(APIResource) {
  return APIResource("/v1/stats/usage", { expand: true, by_tier: true, aggregate: true }) }).factory("ZoneUsage", function(APIResource) {
  return APIResource("/v1/stats/usage/:zone", { expand: true, by_tier: false, aggregate: true }) }).factory("Zone", function(APIResource) {
  return APIResource("/v1/zones/:zone", { stats: true }) }).factory("NetworkList", function(APIResource) {
  return APIResource("/v1/networks") }).factory("Zonefile", function($http, $cookieStore, APIResource) { r = APIResource("/v1/import/zonefile/:jobid");
  r.create = function(args, zonefile, success, error) {
    var api_headers = { "X-NSONE-Key": $cookieStore.get("apikey") };
    $http.uploadFile({ url: "/v1/import/zonefile/" + args.zone + "?async=true", name: "zonefile", file: zonefile, headers: api_headers }).success(success).error(error) };
  return r }).factory("Record", function(APIResource) {
  return APIResource("/v1/zones/:zone/:domain/:type", { stats: false }) }).factory("RecordAnalyze", function(APIResource) {
  return APIResource("/v1/zones/:zone/:domain/:type", { analyze: "reverse", stats: false }) }).factory("DataSource", function(APIResource) {
  return APIResource("/v1/data/sources/:sourceid") }).factory("DataSourceTypes", function(APIResource) {
  return APIResource("/v1/data/sourcetypes") }).factory("DataFeed", function(APIResource) {
  return APIResource("/v1/data/feeds/:sourceid/:feedid") }).factory("ActivityLog", function(APIResource) {
  return APIResource("/v1/account/activity", { limit: 20 }) }).factory("AccountSettings", function(APIResource) {
  return APIResource("/v1/account/settings") }).factory("UsageWarnings", function(APIResource) {
  return APIResource("/v1/account/usagewarnings") }).factory("Password", function(APIResource) {
  return APIResource("/v1/account/password") }).factory("BillAtAGlance", function(APIResource) {
  return APIResource("/v1/account/billataglance") }).factory("Invoice", function(APIResource) {
  return APIResource("/v1/account/invoices/:id") }).factory("PaymentMethod", function(APIResource) {
  return APIResource("/v1/account/paymentmethods/:id") }).factory("Plan", function(APIResource) {
  return APIResource("/v1/account/plan") }).factory("PlanTypes", function(APIResource) {
  return APIResource("/v1/account/plantypes") }).factory("User", function(APIResource) {
  return APIResource("/v1/account/users/:username") }).factory("ResetRequest", function(APIResource) {
  return APIResource("/v1/resetpassword/:username") }).factory("ResetPassword", function(APIResource) {
  return APIResource("/v1/resetpassword/:code") }).factory("UserResendInvite", function(APIResource) {
  return APIResource("/v1/account/reinvite/:username") }).factory("Invite", function(APIResource) {
  return APIResource("/v1/invite/:code") }).factory("InviteSave", function(APIResource) {
  return APIResource("/v1/invite/:code") }).factory("APIKey", function(APIResource) {
  return APIResource("/v1/account/apikeys/:id") }).factory("Team", function(APIResource) {
  return APIResource("/v1/account/teams/:id") }).factory("ZoneRecordSearch", function(APIResource) {
  return APIResource("/v1/search", { q: "", max: 20, type: "all" }) }).factory("MetaTypes", function(APIResource) {
  return APIResource("/v1/metatypes") }).factory("FilterTypes", function(APIResource) {
  return APIResource("/v1/filtertypes") }).factory("JobTypes", function(APIResource) {
  return APIResource("/v1/monitoring/jobtypes") }).factory("Regions", function(APIResource) {
  return APIResource("/v1/monitoring/regions") }).factory("Job", function(APIResource) {
  return APIResource("/v1/monitoring/jobs/:jobid") }).factory("History", function(APIResource) {
  return APIResource("/v1/monitoring/history/:jobid") }).factory("Metrics", function(APIResource) {
  return APIResource("/v1/monitoring/metrics/:jobid") }).factory("List", function(APIResource) {
  return APIResource("/v1/lists/:listid") }).factory("Preferences", function(APIResource) {
  return APIResource("/v1/account/preferences") }).factory("NotifyTypes", function(APIResource) {
  return APIResource("/v1/notifytypes") }).factory("PulsarApps", function(APIResource) {
  return APIResource("/v1/pulsar/apps/:appid") }).factory("PulsarJobs", function(APIResource) {
  return APIResource("/v1/pulsar/apps/:appid/jobs/:jobid") }).factory("PulsarJobStatsLive", function(APIResource) {
  return APIResource("/v1/pulsar/apps/:appid/jobs/:jobid/live") });
